# Pour le développement local, copiez ce fichier vers dev.env et personnalisez les valeurs nécessaires.
# Mode et environnement
AUTOML_MODE=saas
ENVIRONMENT=production
AUTOML_EXPERT_MODE=false

# Base de données PostgreSQL
POSTGRES_HOST=db           # service postgres dans docker-compose, sinon l'hôte Render
POSTGRES_PORT=5432
POSTGRES_USER=automl
POSTGRES_PASSWORD=
POSTGRES_DB=automl
# Générer un mot de passe sécurisé : openssl rand -base64 32
POSTGRES_MULTIPLE_DATABASES=automl,keycloak,airflow,metadata
POSTGRES_MONITORING_USER=monitoring
POSTGRES_MONITORING_PASSWORD=
# Générer : openssl rand -base64 24
POSTGRES_BACKUP_USER=backup_user
POSTGRES_BACKUP_PASSWORD=
# Générer : openssl rand -base64 24
DATABASE_URL=postgresql://automl:${POSTGRES_PASSWORD}@db:5432/automl

# Cache Redis
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=
# Générer un mot de passe sécurisé : openssl rand -base64 32
REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0

# Stockage Minio / S3
MINIO_ENDPOINT=minio:9000
MINIO_ACCESS_KEY=
MINIO_SECRET_KEY=
# Générer des identifiants :
#   MINIO_ACCESS_KEY="$(openssl rand -hex 16)"
#   MINIO_SECRET_KEY="$(openssl rand -base64 32)"
MINIO_SERVICE_PASSWORD=
# Générer : openssl rand -base64 24
MINIO_BUCKET_NAME=automl
MINIO_REGION=us-east-1
MINIO_SECURE=false

# MLflow
MLFLOW_TRACKING_URI=http://mlflow:5000
MLFLOW_USER=mlflow
MLFLOW_PASSWORD=
# Générer un mot de passe sécurisé : openssl rand -base64 24
MLFLOW_AUTH_CONFIG=basic

# API FastAPI
API_PORT=8000
API_HOST=0.0.0.0
LOG_LEVEL=info
JWT_SECRET_KEY=
# Générer un secret JWT : openssl rand -base64 48
CORS_ORIGINS=http://localhost:3000,http://localhost:8501

# Interface Streamlit
UI_FRAMEWORK=streamlit
UI_PORT=8501
UI_THEME=light
UI_TITLE="AutoML Platform"
STREAMLIT_SERVER_PASSWORD=""
API_BASE_URL=http://api:8000

# Authentification SSO (Keycloak)
SSO_ENABLED=true
KEYCLOAK_HOSTNAME=keycloak
KEYCLOAK_PORT=8080
KEYCLOAK_REALM=automl
KEYCLOAK_CLIENT_ID=automl-platform
KEYCLOAK_CLIENT_SECRET=
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=
# Générer des secrets Keycloak : openssl rand -base64 32

# Authentification SSO (Okta / Auth0) - désactivez KEYCLOAK_* si vous utilisez l'un de ces services
OKTA_ENABLED=false
OKTA_DOMAIN=""
OKTA_CLIENT_ID=""
OKTA_CLIENT_SECRET=""
AUTH0_ENABLED=false
AUTH0_DOMAIN=""
AUTH0_CLIENT_ID=""
AUTH0_CLIENT_SECRET=""

# Gestion multi-tenant et quotas
MULTI_TENANT_ENABLED=true
DEFAULT_TENANT_PLAN=trial
DEFAULT_LANGUAGE=en
ENABLE_AI_ASSISTANT=true
ENABLE_AUTO_ML=true
ENABLE_CHAT_ASSISTANT=true
ENABLE_COLLABORATION=true
ENABLE_GPU=false

# Workers Celery
CPU_WORKER_REPLICAS=2
CPU_WORKER_CONCURRENCY=4
CPU_WORKER_CORES=4
CPU_WORKER_MEMORY=8
CPU_WORKER_PORT=5555  # port Flower
FLOWER_USER=admin
FLOWER_PASSWORD=
# Générer un mot de passe Flower : openssl rand -base64 24

# Monitoring
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000
GRAFANA_USER=admin
GRAFANA_PASSWORD=
# Générer un mot de passe Grafana : openssl rand -base64 24
PROMETHEUS_RETENTION=30d
GRAFANA_SSO_ENABLED=true

# =============================================================================
# LLM & Intelligent Agents Configuration
# =============================================================================

# OpenAI Configuration (Required for intelligent data cleaning)
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_CLEANING_MODEL=gpt-4-1106-preview  # Model for cleaning agents

# Anthropic Configuration
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Hugging Face Configuration
HUGGINGFACEHUB_API_TOKEN=your_huggingface_token_here

# Intelligent Data Cleaning Settings
ENABLE_INTELLIGENT_CLEANING=true           # Enable OpenAI agents for data cleaning
MAX_CLEANING_COST_PER_DATASET=5.00        # Maximum cost in USD per dataset
ENABLE_WEB_SEARCH=true                     # Enable web search for validation agent
ENABLE_FILE_OPERATIONS=true                # Enable file operations for cleaner agent
AGENT_TIMEOUT_SECONDS=300                  # Timeout for agent operations
AGENT_MAX_RETRIES=3                        # Maximum retries for failed operations
AGENT_RETRY_DELAY=2                        # Delay between retries in seconds
AGENT_EXPONENTIAL_BACKOFF=true            # Use exponential backoff for retries

# =============================================================================
# Payment & CRM Configuration
# =============================================================================

# Stripe Payment Processing
STRIPE_API_KEY=
STRIPE_WEBHOOK_SECRET=

# CRM Integration (optional)
# CRM_API_KEY=   # HubSpot, Salesforce…

# Sécurité
SESSION_SECRET_KEY=
# Générer un secret UI : openssl rand -base64 32

# Autres
MAX_UPLOAD_SIZE=1000  # Mo
UI_DOCKERFILE=Dockerfile
API_DOCKERFILE=Dockerfile
WORKER_DOCKERFILE=Dockerfile
