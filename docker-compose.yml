version: '3.9'

services:
  # ============================================================================
  # Core Infrastructure Services
  # ============================================================================
  
  # PostgreSQL - Single database for all services
  postgres:
    image: postgres:15-alpine
    container_name: automl_postgres
    environment:
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-automl,keycloak,airflow,metadata}
      POSTGRES_DB: automl
      POSTGRES_USER: ${POSTGRES_USER:-automl}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      POSTGRES_MONITORING_USER: ${POSTGRES_MONITORING_USER:-monitoring}
      POSTGRES_MONITORING_PASSWORD: ${POSTGRES_MONITORING_PASSWORD:?POSTGRES_MONITORING_PASSWORD must be set}
      POSTGRES_BACKUP_USER: ${POSTGRES_BACKUP_USER:-backup_user}
      POSTGRES_BACKUP_PASSWORD: ${POSTGRES_BACKUP_PASSWORD:?POSTGRES_BACKUP_PASSWORD must be set}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - automl_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-automl} -d automl"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis - Cache and message broker
  redis:
    image: redis:7-alpine
    container_name: automl_redis
    command: >
      redis-server 
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD must be set}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - automl_network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:?REDIS_PASSWORD must be set}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO - S3-compatible object storage for datasets and artifacts
  minio:
    image: minio/minio:RELEASE.2024-01-01T16-36-33Z
    container_name: automl_minio
    command: server /data --console-address ":9001"
    environment:
      # Credentials for object storage
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:?MINIO_ACCESS_KEY must be set}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:?MINIO_SECRET_KEY must be set}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      # Multi-tenant buckets configuration
      MINIO_DEFAULT_BUCKETS: models,datasets,artifacts,reports,backups,user-uploads
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - automl_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create MinIO buckets - Initialize storage structure
  minio-init:
    image: minio/mc:RELEASE.2024-01-01T16-36-33Z
    container_name: automl_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY:?MINIO_ACCESS_KEY must be set} ${MINIO_SECRET_KEY:?MINIO_SECRET_KEY must be set};
      /usr/bin/mc mb -p myminio/models;
      /usr/bin/mc mb -p myminio/datasets;
      /usr/bin/mc mb -p myminio/artifacts;
      /usr/bin/mc mb -p myminio/reports;
      /usr/bin/mc mb -p myminio/backups;
      /usr/bin/mc mb -p myminio/user-uploads;
      /usr/bin/mc policy set public myminio/reports;
      /usr/bin/mc admin user add myminio automl-service ${MINIO_SERVICE_PASSWORD:?MINIO_SERVICE_PASSWORD must be set};
      /usr/bin/mc admin policy set myminio readwrite user=automl-service;
      exit 0;
      "
    networks:
      - automl_network

  # ============================================================================
  # SSO Authentication Services
  # ============================================================================

  # Keycloak - Enterprise SSO and identity management
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: automl_keycloak
    environment:
      # Database configuration
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: ${POSTGRES_USER:-automl}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      # Admin credentials
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:?KEYCLOAK_ADMIN_PASSWORD must be set}
      KEYCLOAK_DEMO_PASSWORD: ${KEYCLOAK_DEMO_PASSWORD:-ChangeMe123!}
      # Features
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_FEATURES: token-exchange,admin-fine-grained-authz
      # SSO Configuration
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
    command: ["start-dev", "--import-realm"]
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json:ro
      - keycloak_data:/opt/keycloak/data
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
    networks:
      - automl_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================================================
  # AutoML Platform Services - SaaS Mode
  # ============================================================================

  # API Backend Service - FastAPI
  api:
    build:
      context: .
      dockerfile: ${API_DOCKERFILE:-Dockerfile}
      target: api
      args:
        - INSTALL_MODE=saas
        - ENABLE_GPU=${ENABLE_GPU:-false}
    container_name: automl_api
    environment:
      # Operation Mode
      AUTOML_MODE: ${AUTOML_MODE:-saas}
      AUTOML_EXPERT_MODE: ${AUTOML_EXPERT_MODE:-false}
      AUTOML_SECRET_KEY: ${AUTOML_SECRET_KEY:?AUTOML_SECRET_KEY must be set}

      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-automl}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres:5432/automl
      METADATA_DB_URL: postgresql://${POSTGRES_USER:-automl}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres:5432/metadata
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/0
      
      # Object Storage (MinIO)
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:?MINIO_ACCESS_KEY must be set}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:?MINIO_SECRET_KEY must be set}
      S3_BUCKET_MODELS: models
      S3_BUCKET_DATASETS: datasets
      S3_BUCKET_ARTIFACTS: artifacts
      
      # MLflow
      MLFLOW_TRACKING_URI: http://mlflow:5000
      
      # SSO Authentication
      SSO_ENABLED: ${SSO_ENABLED:-true}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:?JWT_SECRET_KEY must be set}
      KEYCLOAK_ENABLED: ${KEYCLOAK_ENABLED:-true}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM:-automl}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-automl-platform}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:?KEYCLOAK_CLIENT_SECRET must be set}
      
      # Alternative SSO Providers (optional)
      AUTH0_ENABLED: ${AUTH0_ENABLED:-false}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN:-}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID:-}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET:-}
      
      OKTA_ENABLED: ${OKTA_ENABLED:-false}
      OKTA_DOMAIN: ${OKTA_DOMAIN:-}
      OKTA_CLIENT_ID: ${OKTA_CLIENT_ID:-}
      OKTA_CLIENT_SECRET: ${OKTA_CLIENT_SECRET:-}
      
      # LLM APIs for AI assistants
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      ENABLE_AI_ASSISTANT: ${ENABLE_AI_ASSISTANT:-true}
      
      # Billing & Subscription
      STRIPE_API_KEY: ${STRIPE_API_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
      BILLING_ENABLED: ${BILLING_ENABLED:-true}
      
      # Multi-tenant configuration
      MULTI_TENANT_ENABLED: ${MULTI_TENANT_ENABLED:-true}
      DEFAULT_TENANT_PLAN: ${DEFAULT_TENANT_PLAN:-trial}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8501}
      
      # Performance
      MAX_WORKERS: ${API_MAX_WORKERS:-4}
      WORKER_CLASS: ${API_WORKER_CLASS:-uvicorn.workers.UvicornWorker}
    volumes:
      - ./automl_platform:/app/automl_platform:ro
      - api_data:/app/data
      - shared_models:/app/models
      - api_logs:/app/logs
      - ./config:/app/config:ro
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - automl_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Web UI - No-Code Interface (Streamlit/Gradio)
  ui:
    build:
      context: .
      dockerfile: ${UI_DOCKERFILE:-Dockerfile}
      target: ui
      args:
        - UI_FRAMEWORK=${UI_FRAMEWORK:-streamlit}
    container_name: automl_ui
    environment:
      # API Connection
      API_BASE_URL: http://api:8000
      PUBLIC_API_URL: ${PUBLIC_API_URL:-http://localhost:8000}
      
      # MLflow Integration
      MLFLOW_URL: http://mlflow:5000
      PUBLIC_MLFLOW_URL: ${PUBLIC_MLFLOW_URL:-http://localhost:5000}
      
      # Redis for session management
      REDIS_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/1
      SESSION_SECRET_KEY: ${SESSION_SECRET_KEY:?SESSION_SECRET_KEY must be set}
      
      # SSO Configuration
      SSO_ENABLED: ${SSO_ENABLED:-true}
      KEYCLOAK_URL: ${PUBLIC_KEYCLOAK_URL:-http://localhost:8080}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM:-automl}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-automl-platform}
      
      # UI Configuration
      UI_TITLE: ${UI_TITLE:-AutoML Platform}
      UI_THEME: ${UI_THEME:-light}
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE:-1000}
      STREAMLIT_THEME_PRIMARY_COLOR: "#1E88E5"
      STREAMLIT_THEME_BACKGROUND_COLOR: "#FFFFFF"
      STREAMLIT_THEME_SECONDARY_BACKGROUND_COLOR: "#F0F2F6"
      
      # Features toggles
      ENABLE_CHAT_ASSISTANT: ${ENABLE_CHAT_ASSISTANT:-true}
      ENABLE_AUTO_ML: ${ENABLE_AUTO_ML:-true}
      ENABLE_EXPERT_MODE: ${ENABLE_EXPERT_MODE:-false}
      ENABLE_COLLABORATION: ${ENABLE_COLLABORATION:-true}
      DEFAULT_LANGUAGE: ${DEFAULT_LANGUAGE:-en}
      
      # Multi-tenant
      MULTI_TENANT_UI: ${MULTI_TENANT_ENABLED:-true}
      SHOW_TENANT_SELECTOR: ${SHOW_TENANT_SELECTOR:-false}
    volumes:
      - ./automl_platform:/app/automl_platform:ro
      - ./ui:/app/ui:ro
      - ui_data:/app/data
      - shared_models:/app/models:ro
      - uploaded_files:/app/uploads
      - reports:/app/reports
      - ui_logs:/app/logs
    ports:
      - "${UI_PORT:-8501}:8501"
    networks:
      - automl_network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # ============================================================================
  # MLOps Services
  # ============================================================================

  # MLflow - Experiment tracking and model registry
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.10.0
    container_name: automl_mlflow
    environment:
      BACKEND_STORE_URI: postgresql://${POSTGRES_USER:-automl}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres:5432/automl
      ARTIFACT_ROOT: s3://models/
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY:?MINIO_ACCESS_KEY must be set}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY:?MINIO_SECRET_KEY must be set}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      MLFLOW_S3_IGNORE_TLS: "true"
      # Authentication
      MLFLOW_AUTH_CONFIG: ${MLFLOW_AUTH_CONFIG:-basic}
      MLFLOW_TRACKING_USERNAME: ${MLFLOW_USER:-mlflow}
      MLFLOW_TRACKING_PASSWORD: ${MLFLOW_PASSWORD:?MLFLOW_PASSWORD must be set}
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    networks:
      - automl_network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER:-automl}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres:5432/automl
      --default-artifact-root s3://models/
      --host 0.0.0.0
      --port 5000
      --serve-artifacts
      --gunicorn-opts "--timeout 120 --workers 4"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Worker Services for Processing
  # ============================================================================

  # CPU Worker for standard ML tasks
  worker-cpu:
    build:
      context: .
      dockerfile: ${WORKER_DOCKERFILE:-Dockerfile}
      target: worker
    container_name: automl_worker_cpu
    command: >
      celery -A automl_platform.worker.celery_app worker
      --loglevel=${LOG_LEVEL:-info}
      --concurrency=${CPU_WORKER_CONCURRENCY:-4}
      --queues=default,cpu,training,prediction,export,monitoring
      --hostname=worker-cpu@%h
      --max-tasks-per-child=100
      --max-memory-per-child=2000000
    environment:
      # Connections
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/0
      DATABASE_URL: postgresql://${POSTGRES_USER:-automl}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres:5432/automl
      
      # Storage
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:?MINIO_ACCESS_KEY must be set}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:?MINIO_SECRET_KEY must be set}
      
      # MLflow
      MLFLOW_TRACKING_URI: http://mlflow:5000
      
      # Worker config
      WORKER_TYPE: CPU
      MAX_MEMORY_GB: ${CPU_WORKER_MEMORY:-8}
      MAX_CPU_CORES: ${CPU_WORKER_CORES:-4}
    volumes:
      - ./automl_platform:/app/automl_platform:ro
      - worker_data:/app/data
      - shared_models:/app/models
      - worker_logs:/app/logs
    networks:
      - automl_network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    deploy:
      replicas: ${CPU_WORKER_REPLICAS:-2}
      resources:
        limits:
          cpus: "${CPU_WORKER_CORES:-4}"
          memory: ${CPU_WORKER_MEMORY:-8}G
        reservations:
          cpus: "2"
          memory: 4G

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: ${WORKER_DOCKERFILE:-Dockerfile}
      target: worker
    container_name: automl_celery_beat
    command: celery -A automl_platform.worker.celery_app beat --loglevel=${LOG_LEVEL:-info}
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/0
      DATABASE_URL: postgresql://${POSTGRES_USER:-automl}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres:5432/automl
    volumes:
      - ./automl_platform:/app/automl_platform:ro
      - celerybeat_data:/app/celerybeat
    networks:
      - automl_network
    depends_on:
      redis:
        condition: service_healthy

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: ${WORKER_DOCKERFILE:-Dockerfile}
      target: worker
    container_name: automl_flower
    command: >
      celery -A automl_platform.worker.celery_app flower
      --port=5555
      --broker_api=redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/0
      --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:?FLOWER_PASSWORD must be set}
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:?REDIS_PASSWORD must be set}@redis:6379/0
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    networks:
      - automl_network
    depends_on:
      redis:
        condition: service_healthy

  # ============================================================================
  # Monitoring Stack (Prometheus + Grafana)
  # ============================================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: automl_prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - automl_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: automl_postgres_exporter
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_MONITORING_USER:-monitoring}:${POSTGRES_MONITORING_PASSWORD:?POSTGRES_MONITORING_PASSWORD must be set}@postgres:5432/postgres?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - automl_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-exporter:
    image: oliver006/redis_exporter:v1.56.0
    container_name: automl_redis_exporter
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:?REDIS_PASSWORD must be set}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - automl_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: automl_nginx_exporter
    command:
      - '-nginx.scrape-uri=http://127.0.0.1:8080/metrics'
    depends_on:
      nginx:
        condition: service_started
    network_mode: service:nginx
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:9113/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.3.1
    container_name: automl_grafana
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:?GRAFANA_PASSWORD must be set}
      GF_INSTALL_PLUGINS: redis-datasource,plotly-panel
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/automl-overview.json
      # SSO integration
      GF_AUTH_GENERIC_OAUTH_ENABLED: ${GRAFANA_SSO_ENABLED:-true}
      GF_AUTH_GENERIC_OAUTH_NAME: Keycloak
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-automl-platform}
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:?KEYCLOAK_CLIENT_SECRET must be set}
      GF_AUTH_GENERIC_OAUTH_SCOPES: openid profile email
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: http://${KEYCLOAK_HOSTNAME:-localhost}:${KEYCLOAK_PORT:-8080}/realms/${KEYCLOAK_REALM:-automl}/protocol/openid-connect/auth
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: http://keycloak:8080/realms/${KEYCLOAK_REALM:-automl}/protocol/openid-connect/token
      GF_AUTH_GENERIC_OAUTH_API_URL: http://keycloak:8080/realms/${KEYCLOAK_REALM:-automl}/protocol/openid-connect/userinfo
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - automl_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Optional Production Services
  # ============================================================================

  # Nginx Reverse Proxy for production
  nginx:
    image: nginx:alpine
    container_name: automl_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - automl_network
    depends_on:
      - api
      - ui
      - keycloak
    profiles:
      - production

# ============================================================================
# Networks
# ============================================================================

networks:
  automl_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

# ============================================================================
# Volumes
# ============================================================================

volumes:
  # Database
  postgres_data:
    driver: local
  
  # Cache
  redis_data:
    driver: local
  
  # Object Storage
  minio_data:
    driver: local
  
  # SSO
  keycloak_data:
    driver: local
  
  # MLflow
  mlflow_data:
    driver: local
  
  # Application Data
  api_data:
    driver: local
  ui_data:
    driver: local
  worker_data:
    driver: local
  celerybeat_data:
    driver: local
  
  # Shared Volumes
  shared_models:
    driver: local
  uploaded_files:
    driver: local
  reports:
    driver: local
  
  # Logs
  api_logs:
    driver: local
  ui_logs:
    driver: local
  worker_logs:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # Nginx
  nginx_cache:
    driver: local
