version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: automl_postgres_dev
    env_file:
      - dev.env
    environment:
      POSTGRES_DB: automl
      POSTGRES_USER: automl
      POSTGRES_PASSWORD: Tn4BgBIwhfaoaxAZ97wAgE+7z210EVHkWILMHKEaWD0=
      POSTGRES_MONITORING_USER: ${POSTGRES_MONITORING_USER:-monitoring}
      POSTGRES_MONITORING_PASSWORD: ${POSTGRES_MONITORING_PASSWORD:-monitorpass}
      POSTGRES_BACKUP_USER: ${POSTGRES_BACKUP_USER:-backup_user}
      POSTGRES_BACKUP_PASSWORD: ${POSTGRES_BACKUP_PASSWORD:-backuppass}
      # Création de 3 bases de données séparées
      POSTGRES_MULTIPLE_DATABASES: automl,automl_app,automl_audit
    volumes:
      - dev_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - automl_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-automl} -d ${POSTGRES_DB:-automl}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: automl_redis_dev
    env_file:
      - dev.env
    command: >
      redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-devredis}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - dev_redis_data:/data
    networks:
      - automl_dev

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: automl_mlflow_dev
    env_file:
      - dev.env
    environment:
      # MLflow utilise uniquement la base 'automl' pour le tracking
      BACKEND_STORE_URI: postgresql://automl:Tn4BgBIwhfaoaxAZ97wAgE%2B7z210EVHkWILMHKEaWD0%3D@postgres:5432/automl
      ARTIFACT_ROOT: ./mlflow_artifacts
      MLFLOW_TRACKING_USERNAME: ${MLFLOW_USER:-mlflow}
      MLFLOW_TRACKING_PASSWORD: ${MLFLOW_PASSWORD:-mlflowpass}
    command: >
      mlflow server
      --backend-store-uri postgresql://automl:Tn4BgBIwhfaoaxAZ97wAgE%2B7z210EVHkWILMHKEaWD0%3D@postgres:5432/automl
      --default-artifact-root ./mlflow_artifacts
      --host 0.0.0.0
      --port 5000
    ports:
      - "${MLFLOW_PORT:-5001}:5000"
    depends_on:
      - postgres
    networks:
      - automl_dev
  
  api:
    build:
      context: .
      dockerfile: ${API_DOCKERFILE:-Dockerfile}
      target: api
    container_name: automl_api_dev
    # Run as root in development to ensure access to /var/run/docker.sock.
    # For production, prefer matching the host docker group's GID and adding
    # the container user to that group instead of running as root.
    user: "0:0"
    privileged: true
    env_file:
      - dev.env
    environment:
      ENVIRONMENT: development
      CONFIG_PATH: /app/config.yaml
      
      # Base de données application (Auth + API data)
      AUTOML_DATABASE_URL: postgresql://automl:Tn4BgBIwhfaoaxAZ97wAgE%2B7z210EVHkWILMHKEaWD0%3D@postgres:5432/automl_app
      DATABASE_URL: postgresql://automl:Tn4BgBIwhfaoaxAZ97wAgE%2B7z210EVHkWILMHKEaWD0%3D@postgres:5432/automl_app
      
      # Base de données MLflow (tracking uniquement)
      MLFLOW_DATABASE_URL: postgresql://automl:Tn4BgBIwhfaoaxAZ97wAgE%2B7z210EVHkWILMHKEaWD0%3D@postgres:5432/automl
      
      # Base de données Audit & RGPD
      AUTOML_AUDIT_DATABASE_URL: postgresql://automl:Tn4BgBIwhfaoaxAZ97wAgE%2B7z210EVHkWILMHKEaWD0%3D@postgres:5432/automl_audit
      AUTOML_RGPD_DATABASE_URL: postgresql://automl:Tn4BgBIwhfaoaxAZ97wAgE%2B7z210EVHkWILMHKEaWD0%3D@postgres:5432/automl_audit
      
      REDIS_URL: redis://:${REDIS_PASSWORD:-devredis}@redis:6379/0
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-http://localhost:9000}
      SSO_ENABLED: false
    volumes:
      - ./automl_platform:/app/automl_platform
      - ./config.yaml:/app/config.yaml:ro
      - ./scripts/wait-for-it.sh:/usr/local/bin/wait-for-it:ro
      - ./alembic.ini:/app/alembic.ini:ro
      - ./alembic:/app/alembic
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      bash -c "/usr/local/bin/wait-for-it postgres:5432 -t 60 && \
               /usr/local/bin/wait-for-it redis:6379 -t 60 && \
               /usr/local/bin/wait-for-it mlflow:5000 -t 60 && \
               uvicorn automl_platform.app:app --host 0.0.0.0 --port 8000 --reload"
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      mlflow:
        condition: service_started
    networks:
      - automl_dev

  ui:
    build:
      context: .
      dockerfile: ${UI_DOCKERFILE:-Dockerfile}
      target: ui
    container_name: automl_ui_dev
    environment:
      ENVIRONMENT: development
      API_BASE_URL: http://api:8000
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_RUN_ON_SAVE: true
      SESSION_SECRET_KEY: ${SESSION_SECRET_KEY:-devsession}
    volumes:
      - ./automl_platform:/app/automl_platform
      - ./scripts/wait-for-it.sh:/usr/local/bin/wait-for-it:ro
    command: >
      bash -c "/usr/local/bin/wait-for-it api:8000 -t 60 && streamlit run automl_platform/app.py --server.port=8501 --server.address=0.0.0.0"
    ports:
      - "${UI_PORT:-8501}:8501"
    depends_on:
      - api
    networks:
      - automl_dev

networks:
  automl_dev:
    driver: bridge

volumes:
  dev_postgres_data:
  dev_redis_data:
