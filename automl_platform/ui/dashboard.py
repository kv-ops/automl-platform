"""
AutoML Platform No-Code Dashboard with Expert Mode Toggle
==========================================================

Interface web intuitive avec bascule dynamique entre modes:
- Mode simplifi√© par d√©faut pour utilisateurs non techniques
- Mode expert activable via toggle dans la sidebar
- Import facile de donn√©es (drag & drop, Excel, Google Sheets, CRM)
- Configuration visuelle des mod√®les avec options avanc√©es en mode expert
- Suivi en temps r√©el des entra√Ænements
- D√©ploiement en un clic
- G√©n√©ration automatique de rapports
"""

import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
from pathlib import Path
import tempfile
import requests
import time
from typing import Dict, List, Optional, Any, Tuple
import io
import base64
from uuid import uuid4
import os

# Import des composants existants si disponibles
try:
    from .components import (
        DataQualityVisualizer,
        ModelLeaderboard,
        FeatureImportanceVisualizer,
        TrainingProgressTracker,
        AlertsAndNotifications,
        ReportGenerator
    )
    COMPONENTS_AVAILABLE = True
except ImportError:
    COMPONENTS_AVAILABLE = False

# Import des m√©triques si disponibles
try:
    from .ui_metrics import UIMetrics, track_streamlit_page, track_streamlit_action
    METRICS_AVAILABLE = True
except ImportError:
    METRICS_AVAILABLE = False

# Import des nouveaux connecteurs
try:
    from ..api.connectors import (
        ExcelConnector,
        GoogleSheetsConnector, 
        CRMConnector,
        ConnectionConfig,
        read_excel,
        read_google_sheet,
        fetch_crm_data
    )
    CONNECTORS_AVAILABLE = True
except ImportError:
    CONNECTORS_AVAILABLE = False
    st.warning("Connecteurs avanc√©s non disponibles. Installez les d√©pendances avec: pip install openpyxl gspread google-auth")

# Import du template loader
try:
    from ..template_loader import TemplateLoader
    TEMPLATES_AVAILABLE = True
except ImportError:
    TEMPLATES_AVAILABLE = False

# Configuration de l'API backend
API_BASE_URL = st.secrets.get("api_base_url", "http://localhost:8000")
MLFLOW_URL = st.secrets.get("mlflow_url", "http://localhost:5000")

# ============================================================================
# Helpers et Utilitaires
# ============================================================================

class SessionState:
    """Gestionnaire d'√©tat de session am√©lior√© avec mode expert."""
    
    @staticmethod
    def initialize():
        """Initialise l'√©tat de la session."""
        defaults = {
            'current_project': None,
            'uploaded_data': None,
            'data_preview': None,
            'selected_target': None,
            'selected_template': None,  # Template s√©lectionn√©
            'training_config': {},
            'current_experiment': None,
            'training_status': 'idle',
            'deployed_models': [],
            'user_profile': {'name': 'Utilisateur', 'role': 'analyst'},
            'notifications': [],
            'api_token': None,
            'wizard_step': 0,
            'expert_mode': False,  # Mode expert d√©sactiv√© par d√©faut
            'google_sheets_creds': None,  # Credentials Google Sheets
            'crm_config': {}  # Configuration CRM
        }
        
        # V√©rifier la variable d'environnement pour le mode expert initial
        expert_mode_env = os.getenv("AUTOML_EXPERT_MODE", "").lower()
        if expert_mode_env in ["true", "1", "yes", "on"]:
            defaults['expert_mode'] = True
        
        for key, value in defaults.items():
            if key not in st.session_state:
                st.session_state[key] = value

# [Code DataConnector reste identique...]
class DataConnector:
    """Gestionnaire de connexion aux donn√©es avec support √©tendu."""
    # [Tout le code de DataConnector reste identique]
    pass

class AutoMLWizard:
    """Assistant de configuration AutoML guid√© avec mode expert, templates et connecteurs."""
    
    def __init__(self):
        self.steps = [
            "üì§ Chargement des donn√©es",
            "üéØ S√©lection de l'objectif",
            "üìã Template (optionnel)",  # Nouvelle √©tape
            "‚öôÔ∏è Configuration du mod√®le",
            "üöÄ Entra√Ænement",
            "üìä R√©sultats"
        ]
    
    def render(self):
        """Affiche l'assistant √©tape par √©tape."""
        # Barre de progression
        progress = st.session_state.wizard_step / (len(self.steps) - 1)
        st.progress(progress)
        
        # Affichage des √©tapes
        cols = st.columns(len(self.steps))
        for idx, (col, step) in enumerate(zip(cols, self.steps)):
            with col:
                if idx < st.session_state.wizard_step:
                    st.success(step, icon="‚úÖ")
                elif idx == st.session_state.wizard_step:
                    st.info(step, icon="üëâ")
                else:
                    st.text(step)
        
        st.divider()
        
        # Contenu de l'√©tape actuelle
        if st.session_state.wizard_step == 0:
            self._step_data_loading()
        elif st.session_state.wizard_step == 1:
            self._step_target_selection()
        elif st.session_state.wizard_step == 2:
            self._step_template_selection()
        elif st.session_state.wizard_step == 3:
            self._step_model_configuration()
        elif st.session_state.wizard_step == 4:
            self._step_training()
        elif st.session_state.wizard_step == 5:
            self._step_results()
    
    def _step_template_selection(self):
        """Nouvelle √©tape : S√©lection d'un template de cas d'usage."""
        st.header("üìã S√©lection d'un template (optionnel)")
        
        if not TEMPLATES_AVAILABLE:
            st.info("Templates non disponibles. Configuration manuelle uniquement.")
            col1, col2, col3 = st.columns([1, 1, 1])
            with col1:
                if st.button("‚¨ÖÔ∏è Retour", use_container_width=True):
                    st.session_state.wizard_step = 1
                    st.rerun()
            with col3:
                if st.button("Passer ‚û°Ô∏è", type="primary", use_container_width=True):
                    st.session_state.wizard_step = 3
                    st.rerun()
            return
        
        # Charger les templates
        template_loader = TemplateLoader()
        templates = template_loader.list_templates()
        
        # Option pour ne pas utiliser de template
        use_template = st.checkbox("Utiliser un template pr√©-configur√©", value=True)
        
        if use_template:
            # S√©lection du template
            col1, col2 = st.columns([2, 1])
            
            with col1:
                template_names = ["Aucun"] + [t['name'] for t in templates]
                selected_template = st.selectbox(
                    "Choisir un template",
                    template_names,
                    help="Les templates sont des configurations optimis√©es pour des cas d'usage sp√©cifiques"
                )
            
            with col2:
                if selected_template != "Aucun":
                    # Afficher les tags
                    template_info = next((t for t in templates if t['name'] == selected_template), None)
                    if template_info:
                        st.write("**Tags:**")
                        for tag in template_info.get('tags', []):
                            st.badge(tag)
            
            # Description du template s√©lectionn√©
            if selected_template != "Aucun":
                template_info = next((t for t in templates if t['name'] == selected_template), None)
                if template_info:
                    st.info(f"**Description:** {template_info['description']}")
                    
                    # D√©tails du template
                    with st.expander("üìä D√©tails du template"):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.write("**Task:** " + template_info.get('task', 'N/A'))
                            st.write("**Temps estim√©:** " + str(template_info.get('estimated_time', 'N/A')) + " min")
                        
                        with col2:
                            st.write("**Algorithmes:**")
                            for algo in template_info.get('algorithms', [])[:5]:
                                st.write(f"‚Ä¢ {algo}")
                        
                        with col3:
                            st.write("**Version:** " + template_info.get('version', 'N/A'))
                            if st.button("üîç Plus de d√©tails"):
                                # Afficher tous les d√©tails
                                full_info = template_loader.get_template_info(selected_template)
                                st.json(full_info)
                    
                    st.session_state.selected_template = selected_template
            else:
                st.session_state.selected_template = None
        else:
            st.session_state.selected_template = None
            st.info("Configuration manuelle s√©lectionn√©e")
        
        # Navigation
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Retour", use_container_width=True):
                st.session_state.wizard_step = 1
                st.rerun()
        with col3:
            if st.button("Suivant ‚û°Ô∏è", type="primary", use_container_width=True):
                st.session_state.wizard_step = 3
                st.rerun()
    
    def _step_model_configuration(self):
        """√âtape 4: Configuration du mod√®le avec options selon le mode."""
        st.header("‚öôÔ∏è Configuration du mod√®le")
        
        # Appliquer le template si s√©lectionn√©
        if st.session_state.get('selected_template') and TEMPLATES_AVAILABLE:
            st.info(f"üìã Template appliqu√©: **{st.session_state.selected_template}**")
            
            # Charger la configuration du template
            template_loader = TemplateLoader()
            template_config = template_loader.load_template(st.session_state.selected_template)
            
            # Options de personnalisation en mode expert uniquement
            if st.session_state.expert_mode:
                with st.expander("üîß Personnaliser le template"):
                    st.info("Mode expert: vous pouvez modifier les param√®tres du template")
                    
                    # Permettre la modification des algorithmes
                    algorithms = template_config['config'].get('algorithms', [])
                    selected_algos = st.multiselect(
                        "Algorithmes √† utiliser",
                        algorithms,
                        default=algorithms
                    )
                    
                    # HPO settings
                    col1, col2 = st.columns(2)
                    with col1:
                        hpo_iter = st.number_input(
                            "Iterations HPO",
                            value=template_config['config'].get('hpo', {}).get('n_iter', 20),
                            min_value=5,
                            max_value=200
                        )
                    with col2:
                        cv_folds = st.number_input(
                            "CV Folds",
                            value=template_config['config'].get('cv', {}).get('n_folds', 5),
                            min_value=2,
                            max_value=10
                        )
        else:
            # Configuration manuelle
            if st.session_state.expert_mode:
                # Mode expert : toutes les options
                st.subheader("üéì Configuration avanc√©e (Mode Expert)")
                
                tabs = st.tabs(["Algorithmes", "Hyperparam√®tres", "Validation", "Avanc√©"])
                
                with tabs[0]:
                    st.write("**S√©lection des algorithmes**")
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.checkbox("XGBoost", value=True, key="algo_xgboost")
                        st.checkbox("LightGBM", value=True, key="algo_lightgbm")
                        st.checkbox("CatBoost", value=False, key="algo_catboost")
                        st.checkbox("Random Forest", value=True, key="algo_rf")
                    
                    with col2:
                        st.checkbox("Logistic Regression", value=True, key="algo_lr")
                        st.checkbox("SVM", value=False, key="algo_svm")
                        st.checkbox("Neural Network", value=False, key="algo_nn")
                        st.checkbox("Extra Trees", value=False, key="algo_et")
                
                with tabs[1]:
                    st.write("**Optimisation des hyperparam√®tres**")
                    hpo_method = st.selectbox(
                        "M√©thode HPO",
                        ["Optuna", "Grid Search", "Random Search", "Bayesian"],
                        help="Optuna recommand√© pour la plupart des cas"
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        hpo_iter = st.number_input("Nombre d'it√©rations", value=50, min_value=10, max_value=500)
                        early_stopping = st.checkbox("Early stopping", value=True)
                    
                    with col2:
                        time_budget = st.number_input("Budget temps (min)", value=30, min_value=5)
                        parallel_jobs = st.number_input("Jobs parall√®les", value=4, min_value=1, max_value=16)
                
                with tabs[2]:
                    st.write("**Strat√©gie de validation**")
                    cv_strategy = st.selectbox(
                        "Type de validation crois√©e",
                        ["Stratified K-Fold", "K-Fold", "Time Series Split", "Group K-Fold"]
                    )
                    cv_folds = st.slider("Nombre de folds", min_value=2, max_value=10, value=5)
                    
                    test_size = st.slider("Taille du test (%)", min_value=10, max_value=40, value=20)
                
                with tabs[3]:
                    st.write("**Options avanc√©es**")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.checkbox("Gestion automatique du d√©s√©quilibre", value=True)
                        st.checkbox("Feature engineering automatique", value=True)
                        st.checkbox("Ensemble learning", value=True)
                    
                    with col2:
                        st.checkbox("D√©tection de drift", value=False)
                        st.checkbox("Explainability (SHAP)", value=True)
                        st.checkbox("GPU acceleration", value=False)
            else:
                # Mode simplifi√© : options de base uniquement
                st.subheader("üöÄ Configuration simplifi√©e")
                
                optimization_level = st.select_slider(
                    "Niveau d'optimisation",
                    options=["Rapide", "√âquilibr√©", "Maximum"],
                    value="√âquilibr√©",
                    help="Rapide: 5 min | √âquilibr√©: 15 min | Maximum: 45+ min"
                )
                
                # Traduction en configuration
                if optimization_level == "Rapide":
                    st.info("‚ö° Configuration rapide: 3 algorithmes, 10 it√©rations HPO")
                    config = {
                        "algorithms": ["XGBoost", "LightGBM", "LogisticRegression"],
                        "hpo_iter": 10,
                        "cv_folds": 3
                    }
                elif optimization_level == "√âquilibr√©":
                    st.info("‚öñÔ∏è Configuration √©quilibr√©e: 5 algorithmes, 30 it√©rations HPO")
                    config = {
                        "algorithms": ["XGBoost", "LightGBM", "RandomForest", "LogisticRegression", "CatBoost"],
                        "hpo_iter": 30,
                        "cv_folds": 5
                    }
                else:  # Maximum
                    st.info("üöÄ Configuration maximale: 8 algorithmes, 100 it√©rations HPO")
                    config = {
                        "algorithms": ["XGBoost", "LightGBM", "CatBoost", "RandomForest", 
                                     "ExtraTrees", "LogisticRegression", "SVM", "NeuralNetwork"],
                        "hpo_iter": 100,
                        "cv_folds": 5
                    }
                
                # Options basiques
                with st.expander("Options suppl√©mentaires"):
                    handle_imbalance = st.checkbox("G√©rer les classes d√©s√©quilibr√©es", value=True)
                    explain_predictions = st.checkbox("Expliquer les pr√©dictions", value=True)
                
                st.session_state.training_config = config
        
        # Sauvegarder la configuration
        st.session_state.training_config = {
            'expert_mode': st.session_state.expert_mode,
            'template': st.session_state.get('selected_template'),
            # Ajouter les autres param√®tres selon le mode...
        }
        
        # Navigation
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Retour", use_container_width=True):
                st.session_state.wizard_step = 2
                st.rerun()
        with col3:
            if st.button("Lancer l'entra√Ænement üöÄ", type="primary", use_container_width=True):
                st.session_state.wizard_step = 4
                st.rerun()
    
    # [Les autres m√©thodes _step_* restent identiques]
    def _step_data_loading(self):
        """√âtape 1: Chargement des donn√©es avec nouveaux connecteurs."""
        # [Code existant reste identique]
        pass
    
    def _step_target_selection(self):
        """√âtape 2: S√©lection de la cible."""
        # [Code existant reste identique]
        pass
    
    def _step_training(self):
        """√âtape 5: Entra√Ænement."""
        # [Code existant reste identique]
        pass
    
    def _step_results(self):
        """√âtape 6: R√©sultats."""
        # [Code existant reste identique]
        pass


def page_home():
    """Page d'accueil avec indicateurs."""
    # Header avec animation
    st.markdown("""
        <h1 style='text-align: center; color: #1E88E5;'>
            üöÄ AutoML Platform
        </h1>
        <p style='text-align: center; font-size: 20px; color: gray;'>
            Intelligence Artificielle sans code pour tous
        </p>
    """, unsafe_allow_html=True)
    
    # Afficher le mode actuel avec badge color√©
    col1, col2, col3 = st.columns([2, 1, 2])
    with col2:
        if st.session_state.expert_mode:
            st.markdown("""
                <div style='background-color: #FFD700; padding: 10px; border-radius: 10px; text-align: center;'>
                    <b>üéì Mode Expert</b>
                </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
                <div style='background-color: #90EE90; padding: 10px; border-radius: 10px; text-align: center;'>
                    <b>üöÄ Mode Simplifi√©</b>
                </div>
            """, unsafe_allow_html=True)
    
    st.divider()
    
    # V√©rifier les connecteurs disponibles
    status_cols = st.columns(3)
    with status_cols[0]:
        if CONNECTORS_AVAILABLE:
            st.success("‚úÖ Connecteurs disponibles")
        else:
            st.warning("‚ö†Ô∏è Connecteurs limit√©s")
    
    with status_cols[1]:
        if TEMPLATES_AVAILABLE:
            st.success("‚úÖ Templates disponibles")
        else:
            st.warning("‚ö†Ô∏è Templates non disponibles")
    
    with status_cols[2]:
        if COMPONENTS_AVAILABLE:
            st.success("‚úÖ Composants avanc√©s")
        else:
            st.info("‚ÑπÔ∏è Mode basique")
    
    # M√©triques globales
    st.subheader("üìä Tableau de bord")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üéØ Mod√®les entra√Æn√©s", "1,234", "+12 cette semaine")
    with col2:
        st.metric("üìä Pr√©cision moyenne", "94.2%", "+2.1%")
    with col3:
        st.metric("‚ö° Temps moyen", "8.5 min", "-1.2 min")
    with col4:
        st.metric("üöÄ Mod√®les d√©ploy√©s", "456", "+5 aujourd'hui")
    
    st.divider()
    
    # Actions rapides avec templates
    st.subheader("üéØ Actions rapides")
    
    if TEMPLATES_AVAILABLE:
        # Afficher les templates disponibles
        template_loader = TemplateLoader()
        templates = template_loader.list_templates()[:4]  # Top 4 templates
        
        cols = st.columns(len(templates))
        for col, template in zip(cols, templates):
            with col:
                if st.button(
                    f"üìã {template['name'].replace('_', ' ').title()}",
                    use_container_width=True,
                    help=template['description']
                ):
                    st.session_state.selected_template = template['name']
                    st.session_state.wizard_step = 0
                    st.switch_page("pages/wizard.py")
    
    # Actions standard
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("‚ûï Nouveau projet", use_container_width=True, type="primary"):
            st.session_state.wizard_step = 0
            st.switch_page("pages/wizard.py")
    
    with col2:
        if st.button("üìä Import Excel", use_container_width=True):
            st.session_state.wizard_step = 0
            st.switch_page("pages/wizard.py")
    
    with col3:
        if st.button("üìã Google Sheets", use_container_width=True):
            st.session_state.wizard_step = 0
            st.switch_page("pages/wizard.py")
    
    with col4:
        if st.button("ü§ù Connexion CRM", use_container_width=True):
            st.session_state.wizard_step = 0
            st.switch_page("pages/wizard.py")
    
    # Section d'aide contextuelle selon le mode
    with st.expander("üí° Conseils pour bien d√©marrer"):
        if st.session_state.expert_mode:
            st.markdown("""
            ### Mode Expert activ√©
            Vous avez acc√®s √† toutes les fonctionnalit√©s avanc√©es :
            - Configuration d√©taill√©e des algorithmes
            - Optimisation des hyperparam√®tres
            - Validation crois√©e personnalis√©e
            - Options de pr√©processing avanc√©es
            - Templates personnalisables
            """)
        else:
            st.markdown("""
            ### Mode Simplifi√© activ√©
            Configuration optimis√©e automatiquement pour vous :
            - S√©lection automatique des meilleurs algorithmes
            - Param√®tres pr√©-optimis√©s
            - Interface simplifi√©e
            - Templates pr√™ts √† l'emploi
            
            üí° Activez le mode expert dans la sidebar pour plus d'options
            """)


def page_wizard():
    """Page de l'assistant de cr√©ation."""
    wizard = AutoMLWizard()
    wizard.render()


def main():
    """Point d'entr√©e principal avec toggle mode expert."""
    # Configuration de la page
    st.set_page_config(
        page_title="AutoML Platform - No-Code AI",
        page_icon="üöÄ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Initialisation de la session
    SessionState.initialize()
    
    # CSS personnalis√© pour le toggle
    st.markdown("""
        <style>
        .stApp {
            max-width: 100%;
        }
        .expert-mode-toggle {
            background-color: #FFD700;
            border-radius: 10px;
            padding: 10px;
            margin: 10px 0;
        }
        </style>
    """, unsafe_allow_html=True)
    
    # Sidebar avec toggle mode expert
    with st.sidebar:
        st.image("https://via.placeholder.com/300x100/1E88E5/FFFFFF?text=AutoML+Platform", use_column_width=True)
        
        st.divider()
        
        # Toggle Mode Expert avec styling
        st.markdown("### ‚öôÔ∏è Configuration")
        
        # Toggle interactif pour le mode expert
        expert_mode = st.checkbox(
            "üéì Activer le mode Expert",
            value=st.session_state.expert_mode,
            help="Active toutes les options avanc√©es de configuration",
            key="expert_mode_toggle"
        )
        
        # Mettre √† jour l'√©tat de session si chang√©
        if expert_mode != st.session_state.expert_mode:
            st.session_state.expert_mode = expert_mode
            if expert_mode:
                st.success("Mode expert activ√© !")
                st.balloons()
            else:
                st.info("Mode simplifi√© activ√©")
            st.rerun()
        
        # Afficher les infos du mode actuel
        if st.session_state.expert_mode:
            st.markdown("""
            <div style='background-color: #fff3cd; padding: 10px; border-radius: 5px; margin: 10px 0;'>
                <b>Mode Expert activ√©</b><br>
                ‚Ä¢ Tous les param√®tres<br>
                ‚Ä¢ Options avanc√©es<br>
                ‚Ä¢ Templates modifiables
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style='background-color: #d4edda; padding: 10px; border-radius: 5px; margin: 10px 0;'>
                <b>Mode Simplifi√©</b><br>
                ‚Ä¢ Configuration auto<br>
                ‚Ä¢ Interface √©pur√©e<br>
                ‚Ä¢ D√©fauts optimis√©s
            </div>
            """, unsafe_allow_html=True)
        
        st.divider()
        
        # Menu de navigation
        selected = option_menu(
            menu_title="Navigation",
            options=["üè† Accueil", "üéØ Assistant", "üìä Monitoring", "üìÅ Projets", "‚öôÔ∏è Param√®tres"],
            icons=["house", "robot", "graph-up", "folder", "gear"],
            menu_icon="cast",
            default_index=0
        )
        
        st.divider()
        
        # Statut des composants
        st.markdown("### üîå Statut syst√®me")
        
        # Connecteurs
        with st.expander("Connecteurs", expanded=False):
            if CONNECTORS_AVAILABLE:
                st.success("‚úÖ Excel")
                st.success("‚úÖ Google Sheets")
                st.success("‚úÖ CRM")
            else:
                st.warning("‚ö†Ô∏è Limit√©s")
                if st.button("üì¶ Installer"):
                    st.code("pip install openpyxl gspread google-auth")
        
        # Templates
        with st.expander("Templates", expanded=False):
            if TEMPLATES_AVAILABLE:
                template_loader = TemplateLoader()
                templates = template_loader.list_templates()
                st.success(f"‚úÖ {len(templates)} templates")
                for t in templates[:3]:
                    st.write(f"‚Ä¢ {t['name']}")
                if len(templates) > 3:
                    st.write(f"... et {len(templates) - 3} autres")
            else:
                st.warning("‚ö†Ô∏è Non disponibles")
        
        st.divider()
        
        # Aide contextuelle
        with st.expander("‚ùì Aide", expanded=False):
            st.markdown("""
            **Raccourcis clavier:**
            - `Ctrl+K`: Recherche
            - `Ctrl+S`: Sauvegarder
            - `Ctrl+Z`: Annuler
            
            **Support:**
            - üìß support@automl.com
            - üìû +33 1 23 45 67 89
            """)
    
    # Contenu principal selon la page s√©lectionn√©e
    if selected == "üè† Accueil":
        page_home()
    elif selected == "üéØ Assistant":
        page_wizard()
    elif selected == "üìä Monitoring":
        st.info("Page Monitoring en d√©veloppement")
        if st.session_state.expert_mode:
            st.write("Options avanc√©es de monitoring disponibles en mode expert")
    elif selected == "üìÅ Projets":
        st.info("Page Projets en d√©veloppement")
    elif selected == "‚öôÔ∏è Param√®tres":
        st.header("‚öôÔ∏è Param√®tres")
        
        tabs = st.tabs(["G√©n√©ral", "Connecteurs", "Templates", "Avanc√©"])
        
        with tabs[0]:
            st.subheader("Param√®tres g√©n√©raux")
            theme = st.selectbox("Th√®me", ["Clair", "Sombre", "Auto"])
            language = st.selectbox("Langue", ["Fran√ßais", "English", "Espa√±ol"])
            notifications = st.checkbox("Activer les notifications", value=True)
        
        with tabs[1]:
            st.subheader("Configuration des connecteurs")
            if st.session_state.expert_mode:
                st.write("Configuration avanc√©e des connecteurs disponible")
            else:
                st.info("Activez le mode expert pour configurer les connecteurs")
        
        with tabs[2]:
            st.subheader("Gestion des templates")
            if TEMPLATES_AVAILABLE and st.session_state.expert_mode:
                if st.button("Cr√©er un nouveau template"):
                    st.info("Interface de cr√©ation de template")
            else:
                st.info("Mode expert requis pour cr√©er des templates")
        
        with tabs[3]:
            if st.session_state.expert_mode:
                st.subheader("Param√®tres avanc√©s")
                st.number_input("Timeout API (secondes)", value=30, min_value=5, max_value=300)
                st.number_input("Workers parall√®les", value=4, min_value=1, max_value=16)
                st.checkbox("Mode debug", value=False)
                st.checkbox("Logging d√©taill√©", value=False)
            else:
                st.info("Activez le mode expert pour acc√©der aux param√®tres avanc√©s")


if __name__ == "__main__":
    main()
