"""
AutoML Platform No-Code Dashboard with Expert Mode
===================================================

Interface web intuitive pour utilisateurs avec mode expert permettant:
- Mode simplifi√© par d√©faut pour utilisateurs non techniques
- Mode expert avec acc√®s √† tous les param√®tres avanc√©s
- Import facile de donn√©es (drag & drop)
- Configuration visuelle des mod√®les
- Suivi en temps r√©el des entra√Ænements
- D√©ploiement en un clic
- G√©n√©ration automatique de rapports
"""

import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
from pathlib import Path
import tempfile
import requests
import time
from typing import Dict, List, Optional, Any, Tuple
import io
import base64
from uuid import uuid4
import os

# Import des composants existants si disponibles
try:
    from .components import (
        DataQualityVisualizer,
        ModelLeaderboard,
        FeatureImportanceVisualizer,
        TrainingProgressTracker,
        AlertsAndNotifications,
        ReportGenerator
    )
    COMPONENTS_AVAILABLE = True
except ImportError:
    COMPONENTS_AVAILABLE = False

# Import des m√©triques si disponibles
try:
    from .ui_metrics import UIMetrics, track_streamlit_page, track_streamlit_action
    METRICS_AVAILABLE = True
except ImportError:
    METRICS_AVAILABLE = False

# Configuration de l'API backend
API_BASE_URL = st.secrets.get("api_base_url", "http://localhost:8000")
MLFLOW_URL = st.secrets.get("mlflow_url", "http://localhost:5000")

# ============================================================================
# Helpers et Utilitaires
# ============================================================================

class SessionState:
    """Gestionnaire d'√©tat de session am√©lior√© avec mode expert."""
    
    @staticmethod
    def initialize():
        """Initialise l'√©tat de la session."""
        defaults = {
            'current_project': None,
            'uploaded_data': None,
            'data_preview': None,
            'selected_target': None,
            'training_config': {},
            'current_experiment': None,
            'training_status': 'idle',
            'deployed_models': [],
            'user_profile': {'name': 'Utilisateur', 'role': 'analyst'},
            'notifications': [],
            'api_token': None,
            'wizard_step': 0,
            'expert_mode': False  # Mode expert d√©sactiv√© par d√©faut
        }
        
        # V√©rifier la variable d'environnement pour le mode expert
        expert_mode_env = os.getenv("AUTOML_EXPERT_MODE", "").lower()
        if expert_mode_env in ["true", "1", "yes", "on"]:
            defaults['expert_mode'] = True
        
        for key, value in defaults.items():
            if key not in st.session_state:
                st.session_state[key] = value

class DataConnector:
    """Gestionnaire de connexion aux donn√©es."""
    
    @staticmethod
    def upload_file() -> Optional[pd.DataFrame]:
        """Interface d'upload de fichier avec drag & drop."""
        uploaded_file = st.file_uploader(
            "Glissez-d√©posez votre fichier ici",
            type=['csv', 'xlsx', 'xls', 'parquet', 'json'],
            help="Formats support√©s: CSV, Excel, Parquet, JSON",
            key="file_uploader"
        )
        
        if uploaded_file:
            try:
                # D√©tection automatique du format
                file_ext = Path(uploaded_file.name).suffix.lower()
                
                if file_ext == '.csv':
                    df = pd.read_csv(uploaded_file)
                elif file_ext in ['.xlsx', '.xls']:
                    df = pd.read_excel(uploaded_file)
                elif file_ext == '.parquet':
                    df = pd.read_parquet(uploaded_file)
                elif file_ext == '.json':
                    df = pd.read_json(uploaded_file)
                else:
                    st.error(f"Format non support√©: {file_ext}")
                    return None
                
                st.success(f"‚úÖ Fichier charg√©: {uploaded_file.name}")
                st.info(f"üìä Dimensions: {df.shape[0]} lignes √ó {df.shape[1]} colonnes")
                
                return df
                
            except Exception as e:
                st.error(f"Erreur lors du chargement: {str(e)}")
                return None
        
        return None
    
    @staticmethod
    def connect_database() -> Optional[pd.DataFrame]:
        """Interface de connexion aux bases de donn√©es."""
        col1, col2 = st.columns(2)
        
        with col1:
            db_type = st.selectbox(
                "Type de base de donn√©es",
                ["PostgreSQL", "MySQL", "MongoDB", "Snowflake", "BigQuery", "SQL Server"]
            )
        
        with col2:
            connection_method = st.radio(
                "M√©thode de connexion",
                ["Param√®tres manuels", "Cha√Æne de connexion"]
            )
        
        if connection_method == "Param√®tres manuels":
            col1, col2, col3 = st.columns(3)
            with col1:
                host = st.text_input("H√¥te", value="localhost")
                port = st.number_input("Port", value=5432)
            with col2:
                database = st.text_input("Base de donn√©es")
                schema = st.text_input("Sch√©ma", value="public")
            with col3:
                username = st.text_input("Utilisateur")
                password = st.text_input("Mot de passe", type="password")
            
            query = st.text_area(
                "Requ√™te SQL (optionnel)",
                placeholder="SELECT * FROM ma_table LIMIT 1000",
                height=100
            )
        else:
            connection_string = st.text_input(
                "Cha√Æne de connexion",
                type="password",
                placeholder=f"{db_type.lower()}://user:pass@host:port/database"
            )
        
        if st.button("üîå Se connecter", type="primary"):
            with st.spinner("Connexion en cours..."):
                # Simulation - √Ä remplacer par l'appel API r√©el
                time.sleep(1)
                st.success("‚úÖ Connexion √©tablie!")
                # TODO: Impl√©menter la vraie connexion via l'API
                return None
        
        return None

class AutoMLWizard:
    """Assistant de configuration AutoML guid√© avec mode expert."""
    
    def __init__(self):
        self.steps = [
            "üì§ Chargement des donn√©es",
            "üéØ S√©lection de l'objectif",
            "‚öôÔ∏è Configuration du mod√®le",
            "üöÄ Entra√Ænement",
            "üìä R√©sultats"
        ]
    
    def render(self):
        """Affiche l'assistant √©tape par √©tape."""
        # Barre de progression
        progress = st.session_state.wizard_step / (len(self.steps) - 1)
        st.progress(progress)
        
        # Affichage des √©tapes
        cols = st.columns(len(self.steps))
        for idx, (col, step) in enumerate(zip(cols, self.steps)):
            with col:
                if idx < st.session_state.wizard_step:
                    st.success(step, icon="‚úÖ")
                elif idx == st.session_state.wizard_step:
                    st.info(step, icon="üëâ")
                else:
                    st.text(step)
        
        st.divider()
        
        # Contenu de l'√©tape actuelle
        if st.session_state.wizard_step == 0:
            self._step_data_loading()
        elif st.session_state.wizard_step == 1:
            self._step_target_selection()
        elif st.session_state.wizard_step == 2:
            self._step_model_configuration()
        elif st.session_state.wizard_step == 3:
            self._step_training()
        elif st.session_state.wizard_step == 4:
            self._step_results()
    
    def _step_data_loading(self):
        """√âtape 1: Chargement des donn√©es."""
        st.header("üì§ Chargement des donn√©es")
        
        tab1, tab2, tab3 = st.tabs(["üìÅ Fichier local", "üóÑÔ∏è Base de donn√©es", "‚òÅÔ∏è Cloud"])
        
        with tab1:
            df = DataConnector.upload_file()
            if df is not None:
                st.session_state.uploaded_data = df
                st.session_state.data_preview = df.head(100)
        
        with tab2:
            df = DataConnector.connect_database()
            if df is not None:
                st.session_state.uploaded_data = df
                st.session_state.data_preview = df.head(100)
        
        with tab3:
            cloud_provider = st.selectbox(
                "Fournisseur cloud",
                ["AWS S3", "Google Cloud Storage", "Azure Blob", "Dropbox"]
            )
            bucket = st.text_input("Bucket/Container")
            file_path = st.text_input("Chemin du fichier")
            if st.button("üì• T√©l√©charger depuis le cloud"):
                st.info("Fonctionnalit√© en d√©veloppement")
        
        # Aper√ßu des donn√©es
        if st.session_state.data_preview is not None:
            st.subheader("üëÄ Aper√ßu des donn√©es")
            
            # Statistiques rapides
            col1, col2, col3, col4 = st.columns(4)
            df = st.session_state.data_preview
            
            with col1:
                st.metric("Lignes", f"{len(df):,}")
            with col2:
                st.metric("Colonnes", len(df.columns))
            with col3:
                st.metric("M√©moire", f"{df.memory_usage(deep=True).sum() / 1024**2:.2f} MB")
            with col4:
                missing = df.isnull().sum().sum()
                st.metric("Valeurs manquantes", f"{missing:,}")
            
            # Affichage interactif des donn√©es
            st.dataframe(
                df,
                use_container_width=True,
                hide_index=True,
                column_config={
                    col: st.column_config.NumberColumn(format="%.2f")
                    for col in df.select_dtypes(include=['float']).columns
                }
            )
            
            # Bouton suivant
            col1, col2, col3 = st.columns([1, 1, 1])
            with col3:
                if st.button("Suivant ‚û°Ô∏è", type="primary", use_container_width=True):
                    st.session_state.wizard_step = 1
                    st.rerun()
    
    def _step_target_selection(self):
        """√âtape 2: S√©lection de la cible."""
        st.header("üéØ S√©lection de l'objectif")
        
        if st.session_state.uploaded_data is None:
            st.warning("Veuillez d'abord charger des donn√©es")
            if st.button("‚¨ÖÔ∏è Retour"):
                st.session_state.wizard_step = 0
                st.rerun()
            return
        
        df = st.session_state.uploaded_data
        
        # S√©lection du type de probl√®me
        problem_type = st.radio(
            "Type de probl√®me",
            ["üîÆ Pr√©diction (R√©gression)", "üìä Classification", "üîç Clustering", "‚è∞ S√©rie temporelle"],
            horizontal=True
        )
        
        # S√©lection de la colonne cible
        if problem_type in ["üîÆ Pr√©diction (R√©gression)", "üìä Classification"]:
            target_column = st.selectbox(
                "Colonne √† pr√©dire",
                df.columns.tolist(),
                help="S√©lectionnez la variable que vous souhaitez pr√©dire"
            )
            
            if target_column:
                st.session_state.selected_target = target_column
                
                # Analyse de la cible
                st.subheader("üìà Analyse de la cible")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # Distribution de la cible
                    if df[target_column].dtype in ['int64', 'float64']:
                        fig = px.histogram(
                            df, x=target_column,
                            title=f"Distribution de {target_column}",
                            nbins=30
                        )
                    else:
                        fig = px.pie(
                            values=df[target_column].value_counts().values,
                            names=df[target_column].value_counts().index,
                            title=f"R√©partition de {target_column}"
                        )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    # Statistiques
                    st.info("üìä Statistiques")
                    if df[target_column].dtype in ['int64', 'float64']:
                        stats = df[target_column].describe()
                        st.dataframe(stats, use_container_width=True)
                    else:
                        value_counts = df[target_column].value_counts()
                        st.dataframe(value_counts, use_container_width=True)
        
        elif problem_type == "üîç Clustering":
            st.info("Le clustering ne n√©cessite pas de colonne cible")
            st.session_state.selected_target = None
        
        elif problem_type == "‚è∞ S√©rie temporelle":
            col1, col2 = st.columns(2)
            with col1:
                date_column = st.selectbox("Colonne temporelle", df.columns.tolist())
            with col2:
                target_column = st.selectbox("Valeur √† pr√©dire", df.columns.tolist())
            
            if date_column and target_column:
                st.session_state.selected_target = target_column
                # TODO: Visualisation s√©rie temporelle
        
        # Navigation
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Retour", use_container_width=True):
                st.session_state.wizard_step = 0
                st.rerun()
        with col3:
            if st.button("Suivant ‚û°Ô∏è", type="primary", use_container_width=True):
                if st.session_state.selected_target or problem_type == "üîç Clustering":
                    st.session_state.wizard_step = 2
                    st.rerun()
                else:
                    st.error("Veuillez s√©lectionner une colonne cible")
    
    def _step_model_configuration(self):
        """√âtape 3: Configuration du mod√®le avec support du mode expert."""
        st.header("‚öôÔ∏è Configuration du mod√®le")
        
        # Toggle pour le mode expert
        col1, col2 = st.columns([3, 1])
        with col2:
            expert_mode_changed = st.checkbox(
                "üéì Mode Expert",
                value=st.session_state.expert_mode,
                help="Activez pour acc√©der aux param√®tres avanc√©s",
                key="expert_mode_toggle"
            )
            
            if expert_mode_changed != st.session_state.expert_mode:
                st.session_state.expert_mode = expert_mode_changed
                if expert_mode_changed:
                    st.info("Mode expert activ√© - Tous les param√®tres avanc√©s sont disponibles")
                else:
                    st.success("Mode simplifi√© activ√© - Configuration optimis√©e automatiquement")
        
        # Mode de configuration bas√© sur le mode expert
        if not st.session_state.expert_mode:
            # MODE SIMPLIFI√â
            st.success("‚ú® Configuration automatique optimis√©e")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                optimization_metric = st.selectbox(
                    "M√©trique √† optimiser",
                    ["Pr√©cision", "F1-Score", "AUC-ROC"],
                    help="La m√©trique principale √† optimiser"
                )
            
            with col2:
                time_budget = st.slider(
                    "Temps maximum (minutes)",
                    min_value=5,
                    max_value=30,
                    value=10,
                    step=5,
                    help="Temps allou√© √† l'entra√Ænement"
                )
            
            with col3:
                interpretability = st.select_slider(
                    "Priorit√©",
                    options=["Rapidit√©", "√âquilibr√©", "Performance"],
                    value="√âquilibr√©",
                    help="Choisissez votre priorit√©"
                )
            
            # Afficher les param√®tres qui seront utilis√©s
            with st.expander("üìã Param√®tres automatiques"):
                st.info("""
                **Configuration optimis√©e:**
                - **Algorithmes**: XGBoost, Random Forest, R√©gression Logistique
                - **Validation**: Cross-validation 3 folds
                - **Optimisation**: 20 it√©rations Optuna
                - **Pr√©processing**: Automatique
                - **Ensemble**: Vote majoritaire
                - **Workers**: 2 (parall√©lisation limit√©e)
                """)
            
            # Configuration stock√©e (simplifi√©e)
            st.session_state.training_config = {
                'mode': 'simplified',
                'expert_mode': False,
                'metric': optimization_metric,
                'time_budget': time_budget * 60,  # Convertir en secondes
                'interpretability': interpretability,
                'algorithms': ['XGBoost', 'RandomForest', 'LogisticRegression'],
                'cv_folds': 3,
                'hpo_n_iter': 20,
                'ensemble_method': 'voting'
            }
            
            # Suggestion d'activation du mode expert
            st.info("üí° **Conseil**: Activez le mode expert pour personnaliser tous les param√®tres")
        
        else:
            # MODE EXPERT
            config_mode = st.radio(
                "Mode de configuration",
                ["‚öôÔ∏è Personnalis√©", "üìù Configuration JSON"],
                horizontal=True
            )
            
            if config_mode == "‚öôÔ∏è Personnalis√©":
                # Tabs pour organiser les options avanc√©es
                tab1, tab2, tab3, tab4 = st.tabs([
                    "ü§ñ Algorithmes",
                    "üîß Hyperparam√®tres",
                    "‚ö° Calcul distribu√©",
                    "üìä Pr√©processing"
                ])
                
                with tab1:
                    st.subheader("S√©lection des algorithmes")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("**Mod√®les classiques**")
                        use_xgboost = st.checkbox("XGBoost", value=True)
                        use_lightgbm = st.checkbox("LightGBM", value=True)
                        use_catboost = st.checkbox("CatBoost", value=False)
                        use_rf = st.checkbox("Random Forest", value=True)
                        use_et = st.checkbox("Extra Trees", value=False)
                        use_gb = st.checkbox("Gradient Boosting", value=False)
                        use_lr = st.checkbox("R√©gression Logistique/Lin√©aire", value=True)
                        use_svm = st.checkbox("SVM", value=False)
                    
                    with col2:
                        st.markdown("**Mod√®les avanc√©s**")
                        use_nn = st.checkbox("R√©seaux de neurones (TabNet)", value=False)
                        use_ftt = st.checkbox("FT-Transformer", value=False)
                        use_prophet = st.checkbox("Prophet (s√©ries temporelles)", value=False)
                        use_arima = st.checkbox("ARIMA (s√©ries temporelles)", value=False)
                        
                        st.markdown("**Ensemble**")
                        ensemble_method = st.selectbox(
                            "M√©thode d'ensemble",
                            ["Aucune", "Voting", "Stacking", "Blending"],
                            index=2
                        )
                        
                        if ensemble_method == "Stacking":
                            meta_learner = st.selectbox(
                                "Meta-learner",
                                ["LogisticRegression", "Ridge", "XGBoost"]
                            )
                    
                    # Compiler la liste des algorithmes
                    algorithms = []
                    if use_xgboost: algorithms.append("XGBoost")
                    if use_lightgbm: algorithms.append("LightGBM")
                    if use_catboost: algorithms.append("CatBoost")
                    if use_rf: algorithms.append("RandomForest")
                    if use_et: algorithms.append("ExtraTrees")
                    if use_gb: algorithms.append("GradientBoosting")
                    if use_lr: algorithms.append("LogisticRegression")
                    if use_svm: algorithms.append("SVM")
                    if use_nn: algorithms.append("TabNet")
                    if use_ftt: algorithms.append("FTTransformer")
                    if use_prophet: algorithms.append("Prophet")
                    if use_arima: algorithms.append("ARIMA")
                    
                    st.info(f"**{len(algorithms)} algorithmes s√©lectionn√©s**")
                
                with tab2:
                    st.subheader("Optimisation des hyperparam√®tres (HPO)")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        hpo_method = st.selectbox(
                            "M√©thode HPO",
                            ["Optuna (Bay√©sien)", "Grid Search", "Random Search", "Aucune"],
                            help="Optuna est recommand√© pour l'efficacit√©"
                        )
                        
                        if hpo_method != "Aucune":
                            hpo_n_iter = st.number_input(
                                "Nombre d'it√©rations",
                                min_value=10,
                                max_value=500,
                                value=100,
                                step=10,
                                help="Plus d'it√©rations = meilleurs r√©sultats mais plus lent"
                            )
                            
                            early_stopping = st.checkbox(
                                "Early stopping",
                                value=True,
                                help="Arr√™t anticip√© si pas d'am√©lioration"
                            )
                            
                            if early_stopping:
                                patience = st.slider(
                                    "Patience (rounds)",
                                    min_value=5,
                                    max_value=100,
                                    value=20
                                )
                    
                    with col2:
                        st.markdown("**Validation crois√©e**")
                        cv_strategy = st.selectbox(
                            "Strat√©gie",
                            ["KFold", "StratifiedKFold", "TimeSeriesSplit", "GroupKFold"]
                        )
                        
                        cv_folds = st.slider(
                            "Nombre de folds",
                            min_value=2,
                            max_value=10,
                            value=5,
                            help="Plus de folds = validation plus robuste"
                        )
                        
                        scoring_metric = st.selectbox(
                            "M√©trique de scoring",
                            ["accuracy", "f1", "roc_auc", "precision", "recall", "r2", "rmse", "mae"]
                        )
                        
                        warm_start = st.checkbox(
                            "Warm start",
                            value=False,
                            help="Reprendre depuis des essais pr√©c√©dents"
                        )
                
                with tab3:
                    st.subheader("Configuration du calcul distribu√©")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("**Backend de calcul**")
                        compute_backend = st.selectbox(
                            "Backend",
                            ["Local", "Celery", "Ray", "Dask"],
                            help="Ray recommand√© pour le calcul distribu√©"
                        )
                        
                        if compute_backend != "Local":
                            n_workers = st.number_input(
                                "Nombre de workers",
                                min_value=1,
                                max_value=32,
                                value=4,
                                help="Workers parall√®les pour l'entra√Ænement"
                            )
                            
                            max_concurrent = st.number_input(
                                "Jobs concurrents max",
                                min_value=1,
                                max_value=10,
                                value=2
                            )
                    
                    with col2:
                        st.markdown("**Configuration GPU**")
                        use_gpu = st.checkbox(
                            "Activer GPU",
                            value=False,
                            help="Acc√©l√©ration GPU pour XGBoost/LightGBM"
                        )
                        
                        if use_gpu:
                            gpu_per_trial = st.number_input(
                                "GPU par essai",
                                min_value=0.1,
                                max_value=4.0,
                                value=1.0,
                                step=0.1
                            )
                            
                            gpu_memory_fraction = st.slider(
                                "Fraction m√©moire GPU",
                                min_value=0.1,
                                max_value=1.0,
                                value=0.8
                            )
                        
                        # Limites de ressources
                        st.markdown("**Limites de ressources**")
                        memory_limit = st.number_input(
                            "RAM max (GB)",
                            min_value=1,
                            max_value=256,
                            value=16
                        )
                        
                        time_limit = st.number_input(
                            "Temps max (minutes)",
                            min_value=1,
                            max_value=1440,
                            value=60
                        )
                
                with tab4:
                    st.subheader("Pr√©processing avanc√©")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("**Gestion des valeurs manquantes**")
                        missing_strategy = st.selectbox(
                            "Strat√©gie",
                            ["Automatique", "Suppression", "Imputation moyenne", 
                             "Imputation m√©diane", "Imputation KNN", "MICE"]
                        )
                        
                        missing_threshold = st.slider(
                            "Seuil suppression colonnes (%)",
                            min_value=0,
                            max_value=100,
                            value=50,
                            help="Supprimer colonnes avec >X% de valeurs manquantes"
                        )
                        
                        st.markdown("**Normalisation**")
                        scaling_method = st.selectbox(
                            "M√©thode",
                            ["Automatique", "StandardScaler", "MinMaxScaler", 
                             "RobustScaler", "Normalizer", "Aucune"]
                        )
                    
                    with col2:
                        st.markdown("**Feature engineering**")
                        create_polynomial = st.checkbox("Features polynomiales", value=False)
                        if create_polynomial:
                            poly_degree = st.slider("Degr√©", 2, 4, 2)
                        
                        create_interactions = st.checkbox("Interactions", value=False)
                        create_datetime = st.checkbox("Features temporelles", value=True)
                        
                        st.markdown("**S√©lection de features**")
                        feature_selection = st.selectbox(
                            "M√©thode",
                            ["Aucune", "Mutual Information", "SHAP", "Permutation", "Boruta"]
                        )
                        
                        if feature_selection != "Aucune":
                            selection_threshold = st.slider(
                                "Seuil de s√©lection",
                                min_value=0.0,
                                max_value=1.0,
                                value=0.01
                            )
                
                # Compiler la configuration expert
                st.session_state.training_config = {
                    'mode': 'expert',
                    'expert_mode': True,
                    'algorithms': algorithms,
                    'ensemble_method': ensemble_method.lower() if ensemble_method != "Aucune" else "none",
                    'hpo': {
                        'method': hpo_method.split()[0].lower() if hpo_method != "Aucune" else "none",
                        'n_iter': hpo_n_iter if hpo_method != "Aucune" else 0,
                        'early_stopping': early_stopping if hpo_method != "Aucune" else False,
                        'patience': patience if (hpo_method != "Aucune" and early_stopping) else None
                    },
                    'validation': {
                        'strategy': cv_strategy,
                        'n_folds': cv_folds,
                        'scoring': scoring_metric
                    },
                    'compute': {
                        'backend': compute_backend.lower(),
                        'n_workers': n_workers if compute_backend != "Local" else 1,
                        'max_concurrent': max_concurrent if compute_backend != "Local" else 1,
                        'use_gpu': use_gpu,
                        'gpu_per_trial': gpu_per_trial if use_gpu else 0,
                        'memory_limit': memory_limit,
                        'time_limit': time_limit
                    },
                    'preprocessing': {
                        'missing_strategy': missing_strategy.lower(),
                        'missing_threshold': missing_threshold / 100,
                        'scaling_method': scaling_method.lower(),
                        'create_polynomial': create_polynomial,
                        'poly_degree': poly_degree if create_polynomial else 2,
                        'create_interactions': create_interactions,
                        'create_datetime': create_datetime,
                        'feature_selection': feature_selection.lower() if feature_selection != "Aucune" else "none",
                        'selection_threshold': selection_threshold if feature_selection != "Aucune" else 0.01
                    }
                }
            
            else:  # Configuration JSON
                st.subheader("üìù Configuration JSON avanc√©e")
                
                default_config = json.dumps({
                    "algorithms": ["xgboost", "lightgbm", "catboost", "random_forest"],
                    "hyperparameter_optimization": {
                        "method": "optuna",
                        "n_trials": 100,
                        "timeout": 3600,
                        "early_stopping_rounds": 20
                    },
                    "preprocessing": {
                        "feature_engineering": "auto",
                        "outlier_detection": "isolation_forest",
                        "scaling": "robust"
                    },
                    "ensemble": {
                        "method": "stacking",
                        "meta_learner": "logistic_regression",
                        "use_probabilities": True
                    },
                    "distributed": {
                        "backend": "ray",
                        "n_workers": 4,
                        "gpu_enabled": False
                    }
                }, indent=2)
                
                config_json = st.text_area(
                    "Configuration JSON",
                    value=default_config,
                    height=400,
                    help="Configuration compl√®te en format JSON"
                )
                
                try:
                    st.session_state.training_config = json.loads(config_json)
                    st.session_state.training_config['mode'] = 'expert_json'
                    st.session_state.training_config['expert_mode'] = True
                    st.success("‚úÖ Configuration JSON valide")
                except json.JSONDecodeError as e:
                    st.error(f"‚ùå JSON invalide: {str(e)}")
        
        # Estimation des ressources (identique pour les deux modes)
        st.divider()
        st.subheader("üìä Estimation des ressources")
        
        col1, col2, col3, col4 = st.columns(4)
        
        if st.session_state.expert_mode:
            # Estimations bas√©es sur la config expert
            time_est = st.session_state.training_config.get('compute', {}).get('time_limit', 60)
            workers = st.session_state.training_config.get('compute', {}).get('n_workers', 1)
            gpu = "Activ√©" if st.session_state.training_config.get('compute', {}).get('use_gpu', False) else "D√©sactiv√©"
            ram = st.session_state.training_config.get('compute', {}).get('memory_limit', 16)
        else:
            # Estimations pour mode simplifi√©
            time_est = st.session_state.training_config.get('time_budget', 600) / 60
            workers = 2
            gpu = "D√©sactiv√©"
            ram = 4
        
        with col1:
            st.metric("‚è±Ô∏è Temps estim√©", f"{int(time_est)} min")
        with col2:
            st.metric("üíæ RAM requise", f"~{ram} GB")
        with col3:
            st.metric("üî• GPU", gpu)
        with col4:
            st.metric("üë∑ Workers", workers)
        
        # Navigation
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Retour", use_container_width=True):
                st.session_state.wizard_step = 1
                st.rerun()
        with col3:
            if st.button("üöÄ Lancer l'entra√Ænement", type="primary", use_container_width=True):
                st.session_state.wizard_step = 3
                st.session_state.training_status = 'running'
                st.rerun()
    
    def _step_training(self):
        """√âtape 4: Entra√Ænement en cours."""
        st.header("üöÄ Entra√Ænement en cours")
        
        # Afficher le mode utilis√©
        if st.session_state.expert_mode:
            st.info("üéì Entra√Ænement en mode expert avec configuration personnalis√©e")
        else:
            st.success("üöÄ Entra√Ænement en mode simplifi√© avec configuration optimis√©e")
        
        # Simulation de l'entra√Ænement
        progress_container = st.container()
        metrics_container = st.container()
        log_container = st.container()
        
        with progress_container:
            # Barre de progression principale
            progress = st.progress(0)
            status_text = st.empty()
            
            # Simulation de progression
            for i in range(101):
                progress.progress(i)
                status_text.text(f"Progression: {i}%")
                
                if i == 20:
                    st.info("üîç Analyse des donn√©es...")
                elif i == 40:
                    st.info("‚öôÔ∏è Optimisation des hyperparam√®tres...")
                elif i == 60:
                    st.info("üèÉ Entra√Ænement des mod√®les...")
                elif i == 80:
                    st.info("üéØ S√©lection du meilleur mod√®le...")
                elif i == 100:
                    st.success("‚úÖ Entra√Ænement termin√©!")
                
                time.sleep(0.05)  # Simulation r√©duite
        
        with metrics_container:
            st.subheader("üìä M√©triques en temps r√©el")
            
            # Graphiques de m√©triques
            col1, col2 = st.columns(2)
            
            with col1:
                # Courbe de loss
                epochs = list(range(1, 11))
                loss_values = [0.8 - i*0.05 + (i%2)*0.02 for i in range(10)]
                
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=epochs, y=loss_values,
                    mode='lines+markers',
                    name='Loss',
                    line=dict(color='red', width=2)
                ))
                fig.update_layout(
                    title="√âvolution de la Loss",
                    xaxis_title="√âpoque",
                    yaxis_title="Loss"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Courbe d'accuracy
                accuracy_values = [0.6 + i*0.03 - (i%2)*0.01 for i in range(10)]
                
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=epochs, y=accuracy_values,
                    mode='lines+markers',
                    name='Accuracy',
                    line=dict(color='green', width=2)
                ))
                fig.update_layout(
                    title="√âvolution de l'Accuracy",
                    xaxis_title="√âpoque",
                    yaxis_title="Accuracy"
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with log_container:
            st.subheader("üìù Logs d'entra√Ænement")
            
            # Zone de logs avec auto-scroll
            mode_str = "EXPERT" if st.session_state.expert_mode else "SIMPLIFI√â"
            log_text = st.text_area(
                "Logs",
                value=f"""[2024-01-15 10:00:00] D√©marrage de l'entra√Ænement en mode {mode_str}...
[2024-01-15 10:00:05] Chargement des donn√©es: OK
[2024-01-15 10:00:10] Configuration: {len(st.session_state.training_config.get('algorithms', ['XGBoost', 'RandomForest', 'LogisticRegression']))} algorithmes s√©lectionn√©s
[2024-01-15 10:00:15] Pr√©processing: 1000 lignes trait√©es
[2024-01-15 10:00:20] D√©but de l'optimisation {"Optuna" if st.session_state.expert_mode else "simplifi√©e"}
[2024-01-15 10:00:25] Trial 1/{"100" if st.session_state.expert_mode else "20"}: Score = 0.85
[2024-01-15 10:00:30] Trial 2/{"100" if st.session_state.expert_mode else "20"}: Score = 0.87
[2024-01-15 10:00:35] Meilleur score actuel: 0.87
[2024-01-15 10:00:40] Entra√Ænement XGBoost...
[2024-01-15 10:00:45] Validation crois√©e: Fold 1/{st.session_state.training_config.get('cv_folds', 3)}
[2024-01-15 10:00:50] Score moyen: 0.88 (+/- 0.02)
[2024-01-15 10:00:55] Workers actifs: {st.session_state.training_config.get('compute', {}).get('n_workers', 2)}
[2024-01-15 10:01:00] Entra√Ænement termin√© avec succ√®s!""",
                height=200,
                disabled=True
            )
        
        # Bouton pour passer aux r√©sultats
        if st.session_state.training_status == 'completed' or True:  # Simulation
            st.divider()
            if st.button("Voir les r√©sultats ‚û°Ô∏è", type="primary", use_container_width=True):
                st.session_state.wizard_step = 4
                st.session_state.training_status = 'completed'
                st.rerun()
    
    def _step_results(self):
        """√âtape 5: R√©sultats et d√©ploiement."""
        st.header("üìä R√©sultats de l'entra√Ænement")
        
        # Afficher le mode utilis√©
        if st.session_state.expert_mode:
            st.info("üéì R√©sultats obtenus en mode expert")
        else:
            st.success("üöÄ R√©sultats obtenus avec configuration optimis√©e")
        
        # M√©triques principales
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üéØ Accuracy", "92.5%", "+5.2%")
        with col2:
            st.metric("üìà Precision", "91.3%", "+3.1%")
        with col3:
            st.metric("üìä Recall", "93.7%", "+6.4%")
        with col4:
            st.metric("üèÜ F1-Score", "92.5%", "+4.7%")
        
        # Tabs de r√©sultats d√©taill√©s
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üèÜ Leaderboard",
            "üìà Courbes",
            "üéØ Importance",
            "üîç Analyse",
            "üìù Rapport"
        ])
        
        with tab1:
            st.subheader("üèÜ Classement des mod√®les")
            
            # Tableau de leaderboard
            leaderboard_data = {
                "Rang": [1, 2, 3, 4, 5],
                "Mod√®le": ["XGBoost", "LightGBM", "CatBoost", "Random Forest", "Logistic Regression"],
                "Accuracy": [0.925, 0.921, 0.918, 0.905, 0.875],
                "Precision": [0.913, 0.910, 0.908, 0.895, 0.862],
                "Recall": [0.937, 0.932, 0.928, 0.915, 0.888],
                "F1-Score": [0.925, 0.921, 0.918, 0.905, 0.875],
                "Temps (s)": [45, 38, 52, 67, 12]
            }
            
            df_leaderboard = pd.DataFrame(leaderboard_data)
            st.dataframe(
                df_leaderboard,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "Rang": st.column_config.NumberColumn(format="%d"),
                    "Accuracy": st.column_config.ProgressColumn(
                        min_value=0, max_value=1, format="%.1%"
                    ),
                    "Precision": st.column_config.NumberColumn(format="%.1%"),
                    "Recall": st.column_config.NumberColumn(format="%.1%"),
                    "F1-Score": st.column_config.NumberColumn(format="%.1%"),
                }
            )
        
        with tab2:
            st.subheader("üìà Courbes de performance")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Courbe ROC
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=[0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],
                    y=[0, 0.35, 0.5, 0.62, 0.72, 0.80, 0.86, 0.91, 0.95, 0.98, 1],
                    mode='lines',
                    name='ROC Curve',
                    line=dict(color='blue', width=2)
                ))
                fig.add_trace(go.Scatter(
                    x=[0, 1], y=[0, 1],
                    mode='lines',
                    name='Random',
                    line=dict(color='gray', width=1, dash='dash')
                ))
                fig.update_layout(
                    title="Courbe ROC (AUC = 0.92)",
                    xaxis_title="Taux de Faux Positifs",
                    yaxis_title="Taux de Vrais Positifs"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Matrice de confusion
                confusion_matrix = [
                    [850, 75],
                    [60, 915]
                ]
                
                fig = px.imshow(
                    confusion_matrix,
                    labels=dict(x="Pr√©diction", y="R√©alit√©", color="Nombre"),
                    x=['N√©gatif', 'Positif'],
                    y=['N√©gatif', 'Positif'],
                    color_continuous_scale='Blues',
                    text_auto=True
                )
                fig.update_layout(title="Matrice de confusion")
                st.plotly_chart(fig, use_container_width=True)
        
        with tab3:
            st.subheader("üéØ Importance des variables")
            
            # Graphique d'importance
            feature_importance = {
                "Variable": ["age", "income", "credit_score", "loan_amount", "employment_years",
                           "debt_ratio", "property_value", "previous_defaults", "savings", "region"],
                "Importance": [0.25, 0.20, 0.15, 0.12, 0.08, 0.07, 0.05, 0.04, 0.03, 0.01]
            }
            
            df_importance = pd.DataFrame(feature_importance)
            
            fig = px.bar(
                df_importance,
                x="Importance",
                y="Variable",
                orientation='h',
                title="Importance des variables (SHAP)",
                color="Importance",
                color_continuous_scale="Viridis"
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Explication
            st.info("""
            üìä **Interpr√©tation:**
            - **age** (25%): Variable la plus importante pour la pr√©diction
            - **income** (20%): Fort impact sur le r√©sultat
            - **credit_score** (15%): Influence significative
            
            üí° Ces 3 variables repr√©sentent 60% du pouvoir pr√©dictif du mod√®le.
            """)
        
        with tab4:
            st.subheader("üîç Analyse approfondie")
            
            # Analyse de biais
            st.write("### ‚öñÔ∏è Analyse de biais")
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("Parit√© d√©mographique", "‚úÖ Respect√©e", help="Diff√©rence < 5%")
                st.metric("√âgalit√© des opportunit√©s", "‚úÖ Respect√©e", help="Ratio > 0.8")
            
            with col2:
                st.metric("Calibration", "‚ö†Ô∏è √Ä surveiller", help="Score: 0.75")
                st.metric("√âquit√© pr√©dictive", "‚úÖ Respect√©e", help="√âcart < 10%")
            
            # Analyse de robustesse
            st.write("### üõ°Ô∏è Tests de robustesse")
            robustness_data = {
                "Test": ["Donn√©es bruit√©es", "Valeurs manquantes", "Drift temporel", "Adversarial"],
                "Score": [0.91, 0.89, 0.87, 0.85],
                "Statut": ["‚úÖ Pass√©", "‚úÖ Pass√©", "‚ö†Ô∏è Attention", "‚úÖ Pass√©"]
            }
            st.dataframe(pd.DataFrame(robustness_data), use_container_width=True, hide_index=True)
        
        with tab5:
            st.subheader("üìù G√©n√©ration de rapport")
            
            col1, col2 = st.columns(2)
            
            with col1:
                report_type = st.selectbox(
                    "Type de rapport",
                    ["Executive Summary", "Rapport technique", "Documentation mod√®le", "Rapport de conformit√©"]
                )
                
                include_sections = st.multiselect(
                    "Sections √† inclure",
                    ["M√©triques", "Graphiques", "Importance des variables", "Analyse de biais", "Recommandations"],
                    default=["M√©triques", "Graphiques", "Recommandations"]
                )
            
            with col2:
                format_export = st.selectbox(
                    "Format d'export",
                    ["PDF", "HTML", "Word", "PowerPoint", "Jupyter Notebook"]
                )
                
                recipient = st.text_input(
                    "Envoyer √† (email)",
                    placeholder="email@example.com"
                )
            
            if st.button("üìÑ G√©n√©rer le rapport", type="primary"):
                with st.spinner("G√©n√©ration du rapport en cours..."):
                    time.sleep(2)
                    st.success("‚úÖ Rapport g√©n√©r√© avec succ√®s!")
                    
                    # Bouton de t√©l√©chargement simul√©
                    st.download_button(
                        label="üì• T√©l√©charger le rapport",
                        data=b"Contenu du rapport...",
                        file_name=f"rapport_automl_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                        mime="application/pdf"
                    )
        
        # Section de d√©ploiement
        st.divider()
        st.header("üöÄ D√©ploiement du mod√®le")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            deployment_type = st.selectbox(
                "Type de d√©ploiement",
                ["API REST", "Batch", "Streaming", "Edge", "Application web"]
            )
        
        with col2:
            environment = st.selectbox(
                "Environnement",
                ["Production", "Staging", "D√©veloppement", "Test"]
            )
        
        with col3:
            auto_scaling = st.checkbox("Auto-scaling", value=True)
            monitoring = st.checkbox("Monitoring actif", value=True)
        
        if st.button("üöÄ D√©ployer le mod√®le", type="primary", use_container_width=True):
            with st.spinner("D√©ploiement en cours..."):
                # Simulation de d√©ploiement
                progress_bar = st.progress(0)
                for i in range(101):
                    progress_bar.progress(i)
                    time.sleep(0.02)
                
                st.success("‚úÖ Mod√®le d√©ploy√© avec succ√®s!")
                st.info("""
                üîó **URL de l'API:** `https://api.automl-platform.com/v1/predict/model-xyz`
                
                üìä **Dashboard de monitoring:** [Acc√©der au dashboard](https://monitor.automl-platform.com)
                
                üìù **Documentation API:** [Voir la documentation](https://docs.automl-platform.com)
                """)
                
                # Code d'exemple
                st.code("""
# Exemple d'utilisation Python
import requests

url = "https://api.automl-platform.com/v1/predict/model-xyz"
data = {"age": 35, "income": 50000, "credit_score": 720}

response = requests.post(url, json=data)
prediction = response.json()
print(f"Pr√©diction: {prediction['result']}")
print(f"Confiance: {prediction['confidence']}%")
                """, language="python")
        
        # Navigation
        st.divider()
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è Retour √† la configuration", use_container_width=True):
                st.session_state.wizard_step = 2
                st.rerun()
        with col2:
            if st.button("üîÑ Nouvel entra√Ænement", use_container_width=True):
                st.session_state.wizard_step = 0
                st.session_state.uploaded_data = None
                st.session_state.selected_target = None
                st.rerun()
        with col3:
            if st.button("üìä Tableau de bord", type="primary", use_container_width=True):
                st.session_state.wizard_step = 0
                st.rerun()

# ============================================================================
# Pages principales de l'application
# ============================================================================

def page_home():
    """Page d'accueil."""
    # Header avec animation
    st.markdown("""
        <h1 style='text-align: center; color: #1E88E5;'>
            üöÄ AutoML Platform
        </h1>
        <p style='text-align: center; font-size: 20px; color: gray;'>
            Intelligence Artificielle sans code pour tous
        </p>
    """, unsafe_allow_html=True)
    
    # Afficher le mode actuel
    if st.session_state.expert_mode:
        st.info("üéì Mode expert activ√© - Acc√®s complet √† toutes les fonctionnalit√©s")
    else:
        st.success("üöÄ Mode simplifi√© - Configuration optimis√©e automatiquement")
    
    # M√©triques globales
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üéØ Mod√®les entra√Æn√©s", "1,234", "+12 cette semaine")
    with col2:
        st.metric("üìä Pr√©cision moyenne", "94.2%", "+2.1%")
    with col3:
        st.metric("‚ö° Temps moyen", "8.5 min", "-1.2 min")
    with col4:
        st.metric("üöÄ Mod√®les d√©ploy√©s", "456", "+5 aujourd'hui")
    
    st.divider()
    
    # Actions rapides
    st.subheader("üéØ Actions rapides")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚ûï Nouveau projet", use_container_width=True, type="primary"):
            st.session_state.wizard_step = 0
            st.switch_page("pages/wizard.py")
    
    with col2:
        if st.button("üìä Voir les projets", use_container_width=True):
            st.switch_page("pages/projects.py")
    
    with col3:
        if st.button("üìà Monitoring", use_container_width=True):
            st.switch_page("pages/monitoring.py")
    
    # Projets r√©cents
    st.divider()
    st.subheader("üìÅ Projets r√©cents")
    
    projects_data = {
        "Nom": ["Pr√©diction churn", "Scoring cr√©dit", "D√©tection fraude", "Segmentation clients"],
        "Type": ["Classification", "R√©gression", "Classification", "Clustering"],
        "Accuracy": [0.925, 0.887, 0.956, "-"],
        "Statut": ["‚úÖ D√©ploy√©", "üîÑ En cours", "‚úÖ D√©ploy√©", "‚è∏Ô∏è En pause"],
        "Derni√®re modification": ["Il y a 2h", "Il y a 5h", "Hier", "Il y a 3 jours"],
        "Mode": ["Expert", "Simplifi√©", "Expert", "Simplifi√©"]
    }
    
    df_projects = pd.DataFrame(projects_data)
    st.dataframe(
        df_projects,
        use_container_width=True,
        hide_index=True,
        column_config={
            "Accuracy": st.column_config.ProgressColumn(
                min_value=0,
                max_value=1,
                format="%.1%"
            )
        }
    )
    
    # Graphiques de tendance
    st.divider()
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà √âvolution des performances")
        dates = pd.date_range(start='2024-01-01', periods=30, freq='D')
        performance_data = pd.DataFrame({
            'Date': dates,
            'Accuracy': [0.85 + i*0.003 + (i%7)*0.01 for i in range(30)]
        })
        
        fig = px.line(
            performance_data,
            x='Date',
            y='Accuracy',
            title="Accuracy moyenne sur 30 jours"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üéØ R√©partition des mod√®les")
        model_types = pd.DataFrame({
            'Type': ['Classification', 'R√©gression', 'Clustering', 'S√©rie temporelle', 'NLP'],
            'Count': [45, 32, 18, 12, 8]
        })
        
        fig = px.pie(
            model_types,
            values='Count',
            names='Type',
            title="Types de mod√®les d√©ploy√©s"
        )
        st.plotly_chart(fig, use_container_width=True)

def page_wizard():
    """Page de l'assistant de cr√©ation."""
    wizard = AutoMLWizard()
    wizard.render()

def page_monitoring():
    """Page de monitoring des mod√®les."""
    st.header("üìä Monitoring des mod√®les")
    
    # Afficher le mode
    if st.session_state.expert_mode:
        st.info("üéì Mode expert - Toutes les m√©triques avanc√©es disponibles")
    
    # S√©lection du mod√®le
    model_select = st.selectbox(
        "S√©lectionner un mod√®le",
        ["model-churn-v3 (Expert)", "model-credit-v2 (Simplifi√©)", "model-fraud-v5 (Expert)", "model-segment-v1 (Simplifi√©)"]
    )
    
    # M√©triques temps r√©el
    st.subheader("‚ö° M√©triques temps r√©el")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Requ√™tes/min", "127", "+12%")
    with col2:
        st.metric("Latence (ms)", "45", "-5ms")
    with col3:
        st.metric("Taux d'erreur", "0.02%", "0%")
    with col4:
        st.metric("Uptime", "99.99%", "")
    
    # Graphiques de monitoring
    if st.session_state.expert_mode:
        # Mode expert: plus de tabs et m√©triques
        tab1, tab2, tab3, tab4, tab5 = st.tabs(["Performance", "Drift", "Alertes", "GPU/CPU", "Logs d√©taill√©s"])
        
        with tab4:
            st.subheader("üñ•Ô∏è Utilisation GPU/CPU")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("GPU Utilization", "67%", "+12%")
                st.metric("GPU Memory", "4.2/8 GB", "")
            with col2:
                st.metric("CPU Cores", "14/16", "")
                st.metric("RAM", "28/64 GB", "")
        
        with tab5:
            st.subheader("üìù Logs d√©taill√©s")
            st.text_area("Logs syst√®me", value="[Logs d√©taill√©s...]", height=300)
    else:
        # Mode simplifi√©: moins de tabs
        tab1, tab2, tab3 = st.tabs(["Performance", "Drift", "Alertes"])
    
    with tab1:
        st.info("Graphiques de performance")
    
    with tab2:
        st.info("D√©tection de drift")
    
    with tab3:
        st.info("Syst√®me d'alertes")

# ============================================================================
# Application principale
# ============================================================================

def main():
    """Point d'entr√©e principal de l'application Streamlit avec mode expert."""
    # Configuration de la page
    st.set_page_config(
        page_title="AutoML Platform - No-Code AI",
        page_icon="üöÄ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Initialisation de la session
    SessionState.initialize()
    
    # Tracking des m√©triques si disponible
    if METRICS_AVAILABLE:
        mode = "expert" if st.session_state.expert_mode else "simplified"
        track_streamlit_page("dashboard", mode, st.session_state.user_profile.get('role', 'user'))
    
    # CSS personnalis√©
    st.markdown("""
        <style>
        .stApp {
            max-width: 100%;
        }
        .st-emotion-cache-1y4p8pa {
            padding-top: 2rem;
        }
        div[data-testid="stSidebar"] {
            background-color: #f0f2f6;
        }
        .expert-badge {
            background-color: #FFD700;
            color: #000;
            padding: 2px 8px;
            border-radius: 4px;
            font-weight: bold;
        }
        </style>
    """, unsafe_allow_html=True)
    
    # Sidebar avec navigation et mode expert
    with st.sidebar:
        st.image("https://via.placeholder.com/300x100/1E88E5/FFFFFF?text=AutoML+Platform", use_column_width=True)
        
        st.divider()
        
        # Toggle pour le mode expert global
        st.markdown("### üéì Mode Expert")
        expert_mode = st.checkbox(
            "Activer le mode expert",
            value=st.session_state.expert_mode,
            help="Active les options avanc√©es dans toute l'application",
            key="sidebar_expert_mode"
        )
        
        if expert_mode != st.session_state.expert_mode:
            st.session_state.expert_mode = expert_mode
            if expert_mode:
                st.success("Mode expert activ√©")
                st.balloons()
            else:
                st.info("Mode simplifi√© activ√©")
        
        if st.session_state.expert_mode:
            st.caption("üîì Toutes les options avanc√©es sont disponibles")
            st.caption("‚Ä¢ 30+ algorithmes")
            st.caption("‚Ä¢ Configuration HPO compl√®te")
            st.caption("‚Ä¢ Calcul distribu√© (Ray/Dask)")
            st.caption("‚Ä¢ Configuration GPU")
        else:
            st.caption("üöÄ Configuration simplifi√©e et optimis√©e")
            st.caption("‚Ä¢ 3 algorithmes fiables")
            st.caption("‚Ä¢ Param√®tres automatiques")
            st.caption("‚Ä¢ Interface √©pur√©e")
        
        st.divider()
        
        # Menu de navigation
        selected = option_menu(
            menu_title="Navigation",
            options=["üè† Accueil", "üéØ Assistant", "üìä Monitoring", "üìÅ Projets", "‚öôÔ∏è Param√®tres"],
            icons=["house", "robot", "graph-up", "folder", "gear"],
            menu_icon="cast",
            default_index=0,
            styles={
                "container": {"padding": "0!important"},
                "icon": {"color": "#1E88E5", "font-size": "18px"},
                "nav-link": {"font-size": "16px", "text-align": "left", "margin": "0px"},
                "nav-link-selected": {"background-color": "#1E88E5"},
            }
        )
        
        st.divider()
        
        # Informations utilisateur
        st.markdown("### üë§ Utilisateur")
        user_info = f"**{st.session_state.user_profile['name']}**\n\nR√¥le: {st.session_state.user_profile['role']}"
        if st.session_state.expert_mode:
            user_info += "\nüéì **Mode Expert**"
        st.info(user_info)
        
        # Plan et quotas (visible en mode expert)
        if st.session_state.expert_mode:
            st.markdown("### üìä Quotas")
            st.metric("Mod√®les", "8/10")
            st.metric("GPU heures", "4.2/10")
            st.metric("Workers", "4/8")
        
        # Bouton de d√©connexion
        if st.button("üö™ D√©connexion", use_container_width=True):
            st.session_state.clear()
            st.rerun()
        
        st.divider()
        
        # Aide et support
        st.markdown("### üí° Aide & Support")
        if st.session_state.expert_mode:
            st.markdown("""
            - [üìö Documentation avanc√©e](https://docs.automl-platform.com/expert)
            - [üéì Tutoriels experts](https://youtube.com/automl/expert)
            - [üí¨ Support prioritaire](https://support.automl-platform.com/priority)
            - [üìß Contact expert](mailto:expert@automl-platform.com)
            """)
        else:
            st.markdown("""
            - [üìö Documentation](https://docs.automl-platform.com)
            - [üé• Tutoriels vid√©o](https://youtube.com/automl)
            - [üí¨ Chat support](https://support.automl-platform.com)
            - [üìß Contact](mailto:support@automl-platform.com)
            """)
    
    # Contenu principal selon la page s√©lectionn√©e
    if selected == "üè† Accueil":
        page_home()
    elif selected == "üéØ Assistant":
        page_wizard()
    elif selected == "üìä Monitoring":
        page_monitoring()
    elif selected == "üìÅ Projets":
        st.header("üìÅ Projets")
        if st.session_state.expert_mode:
            st.info("Mode expert: Acc√®s √† tous les param√®tres de configuration des projets")
            # Afficher plus d'options pour les projets
            col1, col2, col3 = st.columns(3)
            with col1:
                if st.button("üî¨ Projet avanc√©", use_container_width=True):
                    st.info("Configuration avanc√©e du projet...")
            with col2:
                if st.button("ü§ñ Import mod√®le", use_container_width=True):
                    st.info("Import de mod√®les personnalis√©s...")
            with col3:
                if st.button("üìä Comparaison A/B", use_container_width=True):
                    st.info("Tests A/B avanc√©s...")
        else:
            st.info("Page Projets - Vue simplifi√©e")
            # Vue simplifi√©e des projets
            st.dataframe(pd.DataFrame({
                "Projet": ["Churn", "Fraude", "Scoring"],
                "Statut": ["Actif", "En pause", "Termin√©"],
                "Accuracy": [0.92, 0.88, 0.95]
            }))
    elif selected == "‚öôÔ∏è Param√®tres":
        st.header("‚öôÔ∏è Param√®tres")
        
        tab1, tab2, tab3 = st.tabs(["G√©n√©ral", "Compte", "Avanc√©"])
        
        with tab1:
            st.subheader("Param√®tres g√©n√©raux")
            
            # Mode par d√©faut
            default_mode = st.selectbox(
                "Mode par d√©faut au d√©marrage",
                ["Simplifi√©", "Expert", "Derni√®re utilisation"],
                index=0 if not st.session_state.expert_mode else 1
            )
            
            # Notifications
            st.checkbox("Recevoir les notifications", value=True)
            st.checkbox("Alertes par email", value=False)
            
            # Langue
            st.selectbox("Langue", ["Fran√ßais", "English", "Espa√±ol"])
        
        with tab2:
            st.subheader("Param√®tres du compte")
            
            col1, col2 = st.columns(2)
            with col1:
                st.text_input("Nom", value=st.session_state.user_profile['name'])
                st.text_input("Email", value="user@example.com")
            with col2:
                st.selectbox("R√¥le", ["Analyst", "Data Scientist", "Manager", "Admin"])
                st.selectbox("Plan", ["Free", "Pro", "Enterprise"])
            
            if st.button("üíæ Sauvegarder", type="primary"):
                st.success("Param√®tres sauvegard√©s!")
        
        with tab3:
            if st.session_state.expert_mode:
                st.subheader("Param√®tres avanc√©s (Mode Expert)")
                
                # API Settings
                st.markdown("### üîå Configuration API")
                st.text_input("API Endpoint", value=API_BASE_URL)
                st.text_input("MLflow URI", value=MLFLOW_URL)
                api_key = st.text_input("API Key", type="password", value="sk-****")
                
                # Resource Limits
                st.markdown("### üíª Limites de ressources")
                col1, col2 = st.columns(2)
                with col1:
                    st.number_input("RAM Max (GB)", min_value=1, max_value=256, value=16)
                    st.number_input("CPU Cores Max", min_value=1, max_value=64, value=8)
                with col2:
                    st.number_input("GPU Max", min_value=0, max_value=8, value=1)
                    st.number_input("Workers Max", min_value=1, max_value=32, value=4)
                
                # Advanced Features
                st.markdown("### üöÄ Fonctionnalit√©s avanc√©es")
                st.checkbox("Activer le d√©bogage", value=False)
                st.checkbox("Mode d√©veloppeur", value=False)
                st.checkbox("Acc√®s aux logs syst√®me", value=True)
                st.checkbox("Export ONNX", value=True)
                st.checkbox("Support GPU", value=True)
                
                # Environment Variables
                st.markdown("### üîß Variables d'environnement")
                env_vars = st.text_area(
                    "Variables (format KEY=VALUE)",
                    value="AUTOML_EXPERT_MODE=true\nMAX_WORKERS=8\nGPU_ENABLED=true",
                    height=150
                )
                
                if st.button("‚ö° Appliquer les param√®tres avanc√©s", type="primary"):
                    st.success("Param√®tres avanc√©s appliqu√©s!")
                    st.warning("Certains param√®tres n√©cessitent un red√©marrage")
            else:
                st.info("üîí Activez le mode expert pour acc√©der aux param√®tres avanc√©s")
                if st.button("Activer le mode expert"):
                    st.session_state.expert_mode = True
                    st.rerun()
    
    # Footer
    st.divider()
    
    footer_col1, footer_col2, footer_col3 = st.columns([2, 1, 2])
    with footer_col1:
        mode_badge = "üéì Mode Expert" if st.session_state.expert_mode else "üöÄ Mode Simplifi√©"
        st.markdown(f"""
            <div style='text-align: left; color: gray;'>
                <small>{mode_badge} | AutoML Platform v3.1.0</small>
            </div>
        """, unsafe_allow_html=True)
    
    with footer_col2:
        if st.session_state.expert_mode:
            if st.button("üìñ Guide Expert", use_container_width=True):
                st.info("Ouverture du guide expert...")
    
    with footer_col3:
        st.markdown("""
            <div style='text-align: right; color: gray;'>
                <small>¬© 2024 | Made with ‚ù§Ô∏è for no-code AI</small>
            </div>
        """, unsafe_allow_html=True)


if __name__ == "__main__":
    main()
