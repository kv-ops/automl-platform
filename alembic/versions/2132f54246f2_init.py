"""Init

Revision ID: 2132f54246f2
Revises: 
Create Date: 2025-10-20 03:20:16.739300

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2132f54246f2'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('permissions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('resource', sa.String(length=100), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('scope', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tenants',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('subdomain', sa.String(length=100), nullable=True),
    sa.Column('k8s_namespace', sa.String(length=100), nullable=True, comment='Kubernetes namespace pour isolation'),
    sa.Column('minio_bucket', sa.String(length=100), nullable=True, comment='Bucket MinIO dédié'),
    sa.Column('database_schema', sa.String(length=100), nullable=True, comment='Schéma PostgreSQL dédié (futur)'),
    sa.Column('plan_type', sa.String(length=50), nullable=True),
    sa.Column('max_users', sa.Integer(), nullable=True),
    sa.Column('max_projects', sa.Integer(), nullable=True),
    sa.Column('max_storage_gb', sa.Integer(), nullable=True),
    sa.Column('billing_email', sa.String(length=255), nullable=True),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=True),
    sa.Column('trial_ends_at', sa.DateTime(), nullable=True),
    sa.Column('max_cpu_cores', sa.Integer(), nullable=True, comment='Nombre max de CPU cores'),
    sa.Column('max_memory_gb', sa.Integer(), nullable=True, comment='Mémoire max en GB'),
    sa.Column('max_gpu_hours', sa.Integer(), nullable=True, comment='Heures GPU mensuelles'),
    sa.Column('max_concurrent_jobs', sa.Integer(), nullable=True, comment='Jobs simultanés max'),
    sa.Column('current_cpu_usage', sa.Integer(), nullable=True, comment='CPU utilisé actuellement'),
    sa.Column('current_memory_usage', sa.Integer(), nullable=True, comment='Mémoire utilisée (GB)'),
    sa.Column('current_storage_usage', sa.Integer(), nullable=True, comment='Stockage utilisé (GB)'),
    sa.Column('gpu_hours_used', sa.Integer(), nullable=True, comment='Heures GPU consommées ce mois'),
    sa.Column('encryption_key', sa.String(length=255), nullable=True, comment='Clé de chiffrement Fernet pour données sensibles'),
    sa.Column('api_key_hash', sa.String(length=255), nullable=True, comment='Hash de la clé API principale'),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_suspended', sa.Boolean(), nullable=True, comment='Tenant suspendu (non-paiement, etc.)'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('metadata_json', sa.JSON(), nullable=True, comment='Métadonnées additionnelles flexibles (features, config custom, etc.)'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('subdomain')
    )
    op.create_index(op.f('ix_tenants_is_active'), 'tenants', ['is_active'], unique=False)
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=True)
    op.create_index(op.f('ix_tenants_plan_type'), 'tenants', ['plan_type'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('is_system', sa.Boolean(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('organization', sa.String(length=255), nullable=True),
    sa.Column('plan_type', sa.String(length=50), nullable=True),
    sa.Column('max_workers', sa.Integer(), nullable=True),
    sa.Column('max_concurrent_jobs', sa.Integer(), nullable=True),
    sa.Column('storage_quota_gb', sa.Integer(), nullable=True),
    sa.Column('monthly_compute_minutes', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('sso_provider', sa.String(length=50), nullable=True),
    sa.Column('sso_id', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('key_hash', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('scopes', sa.JSON(), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_hash')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=True),
    sa.Column('resource_id', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('request_data', sa.JSON(), nullable=True),
    sa.Column('response_status', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_timestamp'), 'audit_logs', ['timestamp'], unique=False)
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role_permissions',
    sa.Column('role_id', sa.UUID(), nullable=True),
    sa.Column('permission_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], )
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('role_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('project_users',
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('audit_logs_v2',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('severity', sa.String(length=20), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('resource_type', sa.String(length=50), nullable=True),
    sa.Column('resource_id', sa.String(length=255), nullable=True),
    sa.Column('resource_name', sa.String(length=255), nullable=True),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('request_method', sa.String(length=10), nullable=True),
    sa.Column('request_path', sa.String(length=500), nullable=True),
    sa.Column('request_data', sa.JSON(), nullable=True),
    sa.Column('response_status', sa.Integer(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('gdpr_relevant', sa.Boolean(), nullable=True),
    sa.Column('retention_days', sa.Integer(), nullable=True),
    sa.Column('retention_expires', sa.DateTime(), nullable=True),
    sa.Column('hash_chain', sa.String(length=255), nullable=True),
    sa.Column('signature', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='fk_audit_logs_tenant_id', use_alter=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_audit_logs_user_id', use_alter=True),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_index('idx_resource', 'audit_logs_v2', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_retention', 'audit_logs_v2', ['retention_expires'], unique=False)
    op.create_index('idx_tenant_timestamp', 'audit_logs_v2', ['tenant_id', 'timestamp'], unique=False)
    op.create_index('idx_user_timestamp', 'audit_logs_v2', ['user_id', 'timestamp'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_event_type'), 'audit_logs_v2', ['event_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_gdpr_relevant'), 'audit_logs_v2', ['gdpr_relevant'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_request_id'), 'audit_logs_v2', ['request_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_resource_id'), 'audit_logs_v2', ['resource_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_resource_type'), 'audit_logs_v2', ['resource_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_retention_expires'), 'audit_logs_v2', ['retention_expires'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_severity'), 'audit_logs_v2', ['severity'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_tenant_id'), 'audit_logs_v2', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_timestamp'), 'audit_logs_v2', ['timestamp'], unique=False)
    op.create_index(op.f('ix_audit_logs_v2_user_id'), 'audit_logs_v2', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_audit_logs_v2_user_id'), table_name='audit_logs_v2')
    op.drop_index(op.f('ix_audit_logs_v2_timestamp'), table_name='audit_logs_v2')
    op.drop_index(op.f('ix_audit_logs_v2_tenant_id'), table_name='audit_logs_v2')
    op.drop_index(op.f('ix_audit_logs_v2_severity'), table_name='audit_logs_v2')
    op.drop_index(op.f('ix_audit_logs_v2_retention_expires'), table_name='audit_logs_v2')
    op.drop_index(op.f('ix_audit_logs_v2_resource_type'), table_name='audit_logs_v2')
    op.drop_index(op.f('ix_audit_logs_v2_resource_id'), table_name='audit_logs_v2')
    op.drop_index(op.f('ix_audit_logs_v2_request_id'), table_name='audit_logs_v2')
    op.drop_index(op.f('ix_audit_logs_v2_gdpr_relevant'), table_name='audit_logs_v2')
    op.drop_index(op.f('ix_audit_logs_v2_event_type'), table_name='audit_logs_v2')
    op.drop_index('idx_user_timestamp', table_name='audit_logs_v2')
    op.drop_index('idx_tenant_timestamp', table_name='audit_logs_v2')
    op.drop_index('idx_retention', table_name='audit_logs_v2')
    op.drop_index('idx_resource', table_name='audit_logs_v2')
    op.drop_table('audit_logs_v2')
    op.drop_table('project_users')
    op.drop_table('user_roles')
    op.drop_table('role_permissions')
    op.drop_table('projects')
    op.drop_index(op.f('ix_audit_logs_timestamp'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('roles')
    op.drop_index(op.f('ix_tenants_plan_type'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_is_active'), table_name='tenants')
    op.drop_table('tenants')
    op.drop_table('permissions')
    # ### end Alembic commands ###
